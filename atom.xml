<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Engineering Health]]></title>
  <link href="http://engineering.cerner.com/atom.xml" rel="self"/>
  <link href="http://engineering.cerner.com/"/>
  <updated>2014-10-28T22:14:48-05:00</updated>
  <id>http://engineering.cerner.com/</id>
  <author>
    <name><![CDATA[Cerner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cerner and the Apache Software Foundation]]></title>
    <link href="http://engineering.cerner.com/blog/cerner-and-the-apache-software-foundation/"/>
    <updated>2014-10-28T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/cerner-and-the-apache-software-foundation</id>
    <content type="html"><![CDATA[<p>At the beginning of this year, <a href="http://engineering.cerner.com/2014/01/sponsoring-the-apache-software-foundation/">we announced that Cerner became a bronze-level sponsor</a> of the non-profit <a href="http://www.apache.org/">Apache Software Foundation</a> (ASF). Many of the open source projects we use and contribute to are under the ASF umbrella, so supporting the mission and work of the ASF is important to us.</p>

<p>We&rsquo;re happy to announce that <a href="http://www.apache.org/foundation/thanks.html">Cerner has now increased our sponsorship of the ASF to become a silver-level sponsor</a>. Open source continues to play an integral role in both our architecture and engineering culture. We&rsquo;ve blogged and spoken at conferences about how several ASF projects are core foundational components in our architecture and several of our <a href="http://www.youtube.com/playlist?list=PLSti19ysyJtDYa2JdSjVYWaKhuul1jPUP">tech talks</a> have focused on ASF projects.</p>

<p>Further increasing our sponsorship of the ASF reaffirms our continued support for an organization that provides homes for numerous open source projects that are important not only to us, but the larger development community.</p>

<p><a href="http://sponsor.apache.org/"><img class="center" src="http://engineering.cerner.com/assets/2014-10-28-cerner-and-the-apache-software-foundation/asf-sponsorship-silver-logo.jpg" title="ASF Silver Sponsorship" ></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closures & Currying in JavaScript]]></title>
    <link href="http://engineering.cerner.com/blog/closures-and-currying-in-javascript/"/>
    <updated>2014-09-29T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/closures-and-currying-in-javascript</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>I have been asked many times what closures are and how they work. There are many resources available to learn this concept, but they are not always clear to everyone. This has led me to put together my own approach to exchanging the information.</p>

<p>I will supply code samples. <code>//&gt;</code> denotes an output or return.</p>

<p>Before discussing closures, it is important to review how functions work in JavaScript.</p>

<h2>Introduction to functions</h2>

<p>If a function does not have a return statement, it will implicitly return undefined, which brings us to the simplest functions.</p>

<h3>Noop</h3>

<p>Noop typically stands for no operation; it takes any parameters, does nothing with them, and returns undefined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">noop</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">noop</span><span class="p">(</span><span class="s2">&quot;cat&quot;</span><span class="p">);</span> <span class="c1">//&gt; undefined</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Identity</h3>

<p>The identity function takes in a value and returns it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">identity</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">identity</span><span class="p">(</span><span class="s2">&quot;cat&quot;</span><span class="p">);</span> <span class="c1">//&gt; &quot;cat&quot;</span>
</span><span class='line'><span class="nx">identity</span><span class="p">({</span><span class="nx">a</span><span class="o">:</span> <span class="s2">&quot;dog&quot;</span><span class="p">});</span> <span class="c1">//&gt; Object {a: &quot;dog&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important thing to note here is that the variable (value) passed in is bound to that function’s scope. This means that it is available to everything inside the function and is unavailable outside of it. There is an exception to this, being that objects are passed by reference which will prove useful with the use of closures and currying.</p>

<h3>Functions that evaluate to functions</h3>

<p>Functions are first class citizens in Javascript, which means that they are objects. Since they are objects, they can take functions as parameters, have methods bound to them,  and even return functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">()();</span> <span class="c1">//&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a function that returns a function which returns true.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/not_sure_if.jpg" title="Not sure if my function or a function from inside my function" ></p>

<p>Functions take arguments and those arguments can be values or reference types, such as functions. If you return a function, it is that function you are returning, not a new one (even though it might have just been made to return).</p>

<h2>Closures</h2>

<p>Creating a closure is nothing more than accessing a variable outside of a function’s scope (using a variable that is neither bound on invocation or defined in the function body).</p>

<p>To elaborate, the parent function’s variables are accessible to the inner function. If the inner function uses its parent’s (or parent’s parent’s and so on) variable(s) then they will persist in memory as long as the accessing functions(s) are still referenceable. In JavaScript, referenceable variables are not garbage collected.</p>

<p>Let’s review the identity function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">identity</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The value, a, is bound inside of the function and is unavailable outside of it; there is no closure here.  For a closure to be present, there would need to be a function within this function that would access the variable a.</p>

<p>Why is this important?</p>

<ul>
<li>Closures provide a way to associate data with a method that operates on that data.</li>
<li>They enable private variables in a global world.</li>
<li>Many patterns, including the fairly popular <a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html">module pattern</a>, rely on closures to work correctly.</li>
</ul>


<p>Due to these strengths, and many more, closures are used everywhere. Many popular libraries utilize them internally.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/closures_everywhere.jpg" title="Closures! Closures everywhere!" ></p>

<p>Let’s take a look at an example of closure in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">bar</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">bar</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// will log 4 to the console</span>
</span></code></pre></td></tr></table></div></figure>


<p>The outer function (foo) takes a variable (x), which, which is bound to that function when invoked. When the internal function (bar) is invoked, x (2) and y (2) are added together then logged to the console as 4. Bar is able to access foo&rsquo;s x-variable because bar is created within foo&rsquo;s scope.</p>

<p>The takeaway here is that bar can access foo’s variables because it was created within foo’s scope. A function can access variables in its scope and up the chain to the global scope. It cannot access other function’s scopes that are declared within it or parallel to it.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/question.jpg" title="Question, does a function inside a function mean you have a closure?" ></p>

<p>No, a function inside of a function doesn&rsquo;t have to reference variables outside of its scope. Recall the example function which returned a function which evaluated to true:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// does something with x or not</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">(</span><span class="mi">7</span><span class="p">)();</span> <span class="c1">//&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>No matter what is passed to foo, a function that evaluates to true is returned.  A closure only exists when a function accesses a variable(s) outside of its immediate scope.</p>

<p>This leads into an important implication about closures, they enable you to define a dataset once. We’re talking about private variables here.</p>

<p>Without closures, you recreate the data per function call if you want to keep it private.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kr">private</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span> <span class="c1">// Imaginary large data set - instantiated per invocation</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kr">private</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span> <span class="c1">//&gt; [0, 1, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can do better! With a closure, we can save it to a variable that is private, but only instantiated once.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kr">private</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span> <span class="c1">// Same large imaginary data set - only instantiated once</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// As long as this function exists, it has a reference to the private variable</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kr">private</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bar</span><span class="p">();</span> <span class="c1">//&gt; [0, 1, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>By utilizing closure here, our big imaginary data set only has to be created once. Given the way garbage collection (automatic memory freeing) works in JavaScript, the existence of the internal function (which is returned and set to the variable bar) keeps the private variable from being freed and thus available for subsequent calls. This is really advantageous when you consider large data sets that may be created via Ajax requests which have to go over the network.</p>

<h2>Currying</h2>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/curry.jpg" title="Mmmm Curry!" ></p>

<p>Currying is the process of transforming a function with many arguments into the same function with less arguments.</p>

<p>That sounds cool, but why would I care about that?</p>

<ul>
<li>Currying can help you make higher order factories.</li>
<li>Currying can help you avoid continuously passing the same variables.</li>
<li>Currying can memorize various things including state.</li>
</ul>


<p>Let’s pretend that we have a function (curry) defined and set onto the function prototype which turns a function into a curried version of itself. Please note, that this is not a built in feature of JavaScript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">msg</span><span class="p">(</span><span class="nx">msg1</span><span class="p">,</span> <span class="nx">msg2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">msg1</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">msg2</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">curry</span><span class="p">(</span><span class="s1">&#39;Hello,&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">(</span><span class="s1">&#39;Sarah Connor&#39;</span><span class="p">));</span> <span class="c1">// Hello, Sarah Connor. </span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">(</span><span class="s1">&#39;Goodbye,&#39;</span><span class="p">,</span> <span class="s1">&#39;Sarah Connor&#39;</span><span class="p">));</span> <span class="c1">// Goodbye, Sarah Connor. </span>
</span></code></pre></td></tr></table></div></figure>


<p>By currying the msg function so the first variable is cached as “Hello,”, we can call a simpler function, hello, that only requires one variable to be passed. Doesn’t this sound similar to what a closure might be used for?</p>

<p>In the discussion of functional programming concepts, there is often a sense of resistance.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/not_going_to_happen.jpg" title="Stop trying to make functional programming happen. It's not going to happen!" ></p>

<p>The thing is, you’ve probably already been functionally programming all along. If you use jQuery, you certainly already do.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/what_if_functional.jpg" title="What if I told you, you are already doing some functional programming." ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;some-selector&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// other stuff to justify the each</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-29-closures-and-currying-in-javascript/hide_all_the_things.jpg" title="HIDE ALL THE THINGS" ></p>

<p>Another place you may have seen this is utilizing the map function for arrays.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myArray</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">val</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//&gt; [0, 2, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We’ve seen some examples of closures and how they can be useful. We’ve seen what currying is and more importantly that you’ve likely already been functionally programming even if you didn’t realize it. There is a lot more to learn with closures and currying as well as functional programming.</p>

<p>I ask you to:</p>

<ol>
<li>Work with closures and get the hang of them.</li>
<li>Give currying a shot.</li>
<li>Embrace functional programming as an additional tool that you can utilize to enhance your programs and development workflow.</li>
</ol>


<h2>Additional readings and inspirations</h2>

<ul>
<li><a href="https://leanpub.com/javascript-allonge/read">JavaScript Allongé</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures">MDN Closures</a></li>
<li><a href="http://learn.jquery.com/javascript-101/closures/">jQuery &ndash; JavaScript 101 Closures</a></li>
<li><a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/">Understand JavaScript Closures With Ease</a></li>
<li><a href="http://ejohn.org/blog/partial-functions-in-javascript/">Partial Application in JavaScript</a></li>
<li><a href="http://www.crockford.com/javascript/www_svendtofte_com/code/curried_javascript/index.html">Curried JavaScript Functions</a></li>
</ul>


<h3>Bonus</h3>

<p>Check out how you can utilize closure and currying to manage state throughout a stateful function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">setFoo</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">===</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Specific state</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;State a for the win!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Default state</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Default state&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Empty function since no state is desired. This avoids invocation errors.</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">setFoo</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span> <span class="c1">// Set to the specific state (a)</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span> <span class="c1">//&gt; &quot;State a for the win!&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span> <span class="o">=</span> <span class="nx">setFoo</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// Set foo to its default state</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span> <span class="c1">//&gt; &quot;Default state&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span> <span class="o">=</span> <span class="nx">setFoo</span><span class="p">();</span> <span class="c1">// Set foo to not do anything</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span> <span class="c1">//&gt; undefined</span>
</span><span class='line'><span class="c1">// etc</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bonus 2</h3>

<p>Checkout how closures and currying can be used to create higher order functions to create methods on the fly: <a href="http://jsfiddle.net/GneatGeek/A9WRb/">http://jsfiddle.net/GneatGeek/A9WRb/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intern HackFest 2014]]></title>
    <link href="http://engineering.cerner.com/blog/intern-hackfest-2014/"/>
    <updated>2014-09-08T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/intern-hackfest-2014</id>
    <content type="html"><![CDATA[<p>Ten teams of two to four Cerner interns competed in a week-long HackFest this summer, working to solve any problem they put their minds to. This competition cumulated in a presentation and judging of projects, with prizes of Raspberry Pi Kits for each member of the second place team and Leap Motions for each member of the winning team. From mobile apps, to machine learning algorithms, to drones…this year’s Summer Intern HackFest has been one for the books.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-08-intern-hackfest-2014/Leap.png"></p>

<p>We called ourselves Team Rubber Duck Dynasty, and it was made up of Umer Khan (University of Notre Dame), Ryan Boccabella (University of Notre Dame), MaKenzie Kalb (Vanderbilt University), and Jake Gould (University of Kansas).</p>

<p>We were excited to get to work the first night when the week-long competition had commenced. Since the beginning of the summer, all of us had been impressed with the caliber of talent Cerner brought into the Software Engineer Internship program. All of the nine teams we were up against were made up of remarkably smart, driven college students from all over the country. One of the most difficult parts of the HackFest was deciding on an interesting and competitive project that could be feasibly completed in only a week (without too many sleepless nights). One of our four team members was a member of the iOS team, and convinced us that an iOS game was the way to go. We wanted to make a game that we would be excited to show our friends as well as the judges.</p>

<p>We ended up building an app called Encore. It is a musical turn-based game revolving around the creation and mirroring of three second tunes between users. Tunes are created using four arpeggio based tones from real piano, guitar, or tenor trombone recordings. The initiating iOS device and sends the data to the Parse server using the Parse API for iOS. Parse stores this data on the server and sends a push notification to the receiving iOS device. Each time a new game is created, an activity is logged on the server to keep track of the game data.  When the receiving user selects the game, it downloads the game data from the server and starts the game. Once the app downloads the game data, it is programmed to decode an array of dictionaries of instrument key and time and convert the array into an audio playback; this allowed for faster upload and download times, as well as significantly smaller game data files. The receiving user hears and immediately attempts to replay the tune. Scoring is accomplished using a Needleman-Wunsch algorithm for sequence alignment. The receiving user now has their chance to create a tune, and the melodious competition continues.</p>

<p>Over the week, we began to get to know our teammates even more than we probably wanted. Passion is the main word that comes to mind when we reminisce on this highlighting week of our summer. From the uncertainty when overhearing other groups huddled in a room talking excitedly about cutting-edge technologies, to the shrieks of excitement when a test finally passed that perhaps woke many a consulting intern roommate, this HackFest was filled with memories all around. As we went for a celebratory completion dinner the night before the presentations Monday morning, the satisfaction of completion was sweet in the air. Sitting there, playing our noisy pride and joy on our phones at the table, we agreed that the week was an excellent experience already…and we hadn’t even started the real judging yet.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-08-intern-hackfest-2014/Auditorium.png"></p>

<p>Sound checks were full of nerves and excitement the morning we presented our project. The knowledge that each team had a mere five minutes to “sell” what had been more time consuming than sleep over the past week was a challenge everyone was hoping to ace. Later on that afternoon, when the esteemed judges Chris Finn, Michelle Brush, and Jenni Syed were announced as the event began, the caliber of the resources Cerner provides for their many interns was standing right in front of us. We heard from many enthusiastic, impressive groups that afternoon. The presentations showcased many feats of great teamwork and skill: a recommendation engine, dashboard for developers, chatting website, facial recognition android app, iOS game, machine learning algorithm, twitter-controlled drone, and music website.</p>

<p>After a delicious ice cream break while scores were deliberated and after judges provided valuable feedback for each team, the moment of anticipation was upon us. All teams certainly completed the day with the ultimate reward of new skills learned, friends made, and a fantastic project that some are undoubtedly still building off of. As the first and second place teams were called to the stage, Team Rubber Duck Dynasty was surprised and thrilled to be among them. And as the runner up, Team Marky Mark and the Funky Bunch, received their Raspberry Pi Kits, we were amazed to find out each of us was taking home our very own Leap Motion.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-09-08-intern-hackfest-2014/group-photo.png"></p>

<p>We returned to our actual teams late that afternoon, proud of our accomplishments and brand new owners of a cutting-edge technology. We received the congratulations of our superiors and mentors, many of whom were our biggest encouragers to participate and supporters throughout the week. The numerous empowered associates that have guided us through this summer have been an unbelievable community &ndash; a community that all of us are incredibly grateful to have been a part of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Plain Text Is a Lie]]></title>
    <link href="http://engineering.cerner.com/blog/the-plain-text-is-a-lie/"/>
    <updated>2014-08-02T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/the-plain-text-is-a-lie</id>
    <content type="html"><![CDATA[<h2>There is no such thing as plain text</h2>

<p>&ldquo;But I see .txt files all the time&rdquo; you say. &ldquo;My source code is plain text&rdquo; you claim. &ldquo;What about web pages?!&rdquo; you frantically ask. True, each of those things is comprised of text. The <em>plain</em> part is the problem. Plain denotes default or normal. There is no such thing. Computers store and transmit data in a number of methods; each are anything but <em>plain</em>. If you write software, design websites or test systems where even a single character of text is accepted as input, displayed as output, transmitted to another system or stored for later &ndash; please read on to learn why the plain text is a lie!</p>

<p>The topic of text handling applies to many disciplines:</p>

<ul>
<li><strong>UX/web designers</strong> &ndash; Your UX is the last mile of displaying text to users.</li>
<li><strong>API developers</strong> &ndash; Your APIs should tell your consumers what languages, encodings and character sets your service supports.</li>
<li><strong>DBAs</strong> &ndash; You should know what kinds of text your database can handle.</li>
<li><strong>App developers</strong> &ndash; You apps should not crash when non-English characters are encountered.</li>
</ul>


<p>After reading this article you will …</p>

<ul style="list-style-type: none;">
  <li>… understand why text encodings are important.</li>
  <li>… have some best practices for handling text in your tool belt.</li>
  <li>… know a bit about how computers deal with text.</li>
</ul>


<p>This topic has been extensively written about already. I highly recommend reading Joel Spolsky&rsquo;s <a href="http://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a>. You should also read up on how your system handles strings. Then, go read how the APIs you talk to send/receive strings. Pythonistas, check out Ned Batchelder&rsquo;s <a href="http://nedbatchelder.com/text/unipain.html">Pragmatic Unicode</a> presentation.</p>

<p>OK, let&rsquo;s get started!</p>

<h2>Part I &ndash; Gallery of FAIL or &ldquo;When text goes wrong, by audience&rdquo;</h2>

<p>Let&rsquo;s start off by demonstrating how text handling can fail, and fail hard. The following screen shots and snippets show some of the ways text handling can fail and who should care about the type of failure.</p>

<h3>UX and web people</h3>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/resume.jpeg" title="Resumé Wikipedia article rendered in the wrong encoding" ></p>

<p>The above image shows the English wikipedia article on <a href="http://en.wikipedia.org/wiki/R%C3%A9sum%C3%A9">Résumés</a> with garbled text. Garbled text can happen if your web pages don&rsquo;t specify an encoding or character set in your markup. Specifying the <em>wrong</em> encoding can also cause garbled text. XML and JavaScript need correct character sets too. It&rsquo;s important to note that <em>no error or exception was raised here</em>. The text looks wrong to the user, but the failure happens silently.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/tokyo.jpeg" title="Tokyo Wikipedia article Aramaic translation" ></p>

<p>This <a href="http://arc.wikipedia.org/wiki/%DC%9B%DC%98%DC%A9%DC%9D%DC%98">article on Tokyo</a> above is displayed in a language (Aramaic) that my fonts don&rsquo;t support. Instead of a symbol, we see a box with a number identifying the un-showable character. If you think that example is too contrived, here is a more commonly used symbol: a <a href="http://www.fileformat.info/info/unicode/char/1d161/browsertest.htm">16th note from sheet music</a>. Many perfectly valid characters are not supported by widely used fonts. Specialized web fonts might not support the characters you need.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/music.jpeg" title="Music note character test page" ></p>

<h3>API developers</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Fetch the Universal Declaration of Human Rights in Arabic
</span><span class='line'>documentAPIClient.getTitle(docID=123)</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/mojibake1.png" title="Mojibake example 1" ></p>

<p>The result of this API call (<a href="http://en.wikipedia.org/wiki/Mojibake#Example">example source</a>) is similar to the last two examples: nonsense text. This can happen if the client and server use different text encodings. By the way, this situation happens so often that there&rsquo;s a term for it: <a href="https://en.wikipedia.org/wiki/Mojibake">Mojibake</a>.</p>

<p>Here are some client/server scenarios resulting in Mojibake:</p>

<ul>
<li>The server didn&rsquo;t document their encoding and the client guessed the wrong encoding.</li>
<li>The server or client inherit the encoding of their execution environment (virtual machine, OS, parent process, etc.), but the execution environment&rsquo;s settings changed from their original values.</li>
</ul>


<h3>DBAs</h3>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/mojibake2.png" title="Mojibake example 2" ></p>

<p>Database systems can be misconfigured such that characters sent to the database are not stored accurately. In this example, the offending characters are replaced with the imaginatively-named <em>Replacement Character</em> (&ldquo;�&rdquo;). The original characters are forever lost. Worse still, replacement characters will be returned by your queries and ultimately shown to your users. Sometimes, offending characters will be omitted from the stored value or replaced with a nearest match supported character. In both scenarios the database has mangled the original data.</p>

<h3>App developers</h3>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/stack-trace.png" title="Unicode encoding error traceback" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">org</span><span class="o">.</span><span class="n">scalatest</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="nc">TestFailedException</span><span class="k">:</span> <span class="err">&quot;</span><span class="kt">d</span><span class="o">[</span><span class="kt">Ã©</span><span class="o">]</span><span class="n">funt</span><span class="s">&quot; did not equal &quot;</span><span class="n">d</span><span class="o">[</span><span class="kt">é</span><span class="o">]</span><span class="n">funt</span><span class="err">&quot;</span>
</span><span class='line'><span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="n">scalatest</span><span class="o">.</span><span class="nc">MatchersHelper</span><span class="n">$</span><span class="o">.</span><span class="n">newTestFailedException</span><span class="o">(</span><span class="nc">MatchersHelper</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">160</span><span class="o">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="n">reflect</span><span class="o">.</span><span class="nc">NativeMethodAccessorImpl</span><span class="o">.</span><span class="n">invoke</span><span class="o">(</span><span class="nc">NativeMethodAccessorImpl</span><span class="o">.</span><span class="n">java</span><span class="k">:</span><span class="err">39</span><span class="o">)</span>
</span><span class='line'><span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="n">intellij</span><span class="o">.</span><span class="n">rt</span><span class="o">.</span><span class="n">execution</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="nc">AppMain</span><span class="o">.</span><span class="n">main</span><span class="o">(</span><span class="nc">AppMain</span><span class="o">.</span><span class="n">java</span><span class="k">:</span><span class="err">134</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The top image shows the 500 page of an app that crashed when improperly encoding. In the Scala error message (bottom), a property file was read in <a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1">ISO-8859-1</a> encoding but had UTF-8 encoded bytes in it. This caused the unit test to fail.</p>

<p>Your source code, web pages, properties files, and any other text artifact you work with has an encoding. Every tool in your development tool chain (local server, terminal, editor, browser, CI system, etc.) is a potential failure point if these encodings are not honoroed.</p>

<h2>Part II &ndash; Avoid text handling problems</h2>

<h3>Ghost in the machine</h3>

<p>You&rsquo;ve seen examples of failure and (hopefully) are wondering how such failures can be avoided. To avoid failure you must ask yourself one question: &ldquo;Can my system store and transmit a ghost?&rdquo;</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/ghost.png" title="GHOST unicode character" ></p>

<p><em>GHOST</em> (code point <a href="http://codepoints.net/U+1F47B">U+1F47B</a>) is a valid (albeit weird) part of the <a href="http://www.unicode.org/standard/WhatIsUnicode.html">Unicode</a> standard. Unicode is a system of storing and manipulating text that supports thousands of languages.  Using Unicode properly will go a long way to prevent text handling problems. Thus, if your system can store, transmit, read and write GHOST then you&rsquo;re doing it right. But how to handle this GHOST?</p>

<h3>Some Terminology</h3>

<p>You need to know some terms before the rest of this article will make any sense.</p>

<dl>
  <dt>Unicode object</dt>
  <dd>A datatype that lets you operate on Unicode text.</dd>

  <dt>Byte-string</dt>
  <dd>A sequence of bytes (octets).</dd>

  <dt>Encode</dt>
  <dd>To turn a Unicode object into a byte-string, where the bytes follow an encoding.</dd>

  <dt>Encoding (noun)</dt>
  <dd>A standard about what a byte means, like: <em>When you see 01000001, it means &#8220;A&#8221;</em>.</dd>

  <dt>Decode</dt>
  <dd>The inverse operation of encode. To turn a byte-string of a certain encoding into a Unicode object.</dd>
</dl>


<p>Remembering the difference between <em>encode</em> and <em>decode</em> can be difficult. One trick to keep them straight is to think of Unicode objects as the ideal state of being (thanks, <a href="http://www.joelonsoftware.com/articles/Unicode.html">Joel Spolksy</a>) and byte-strings as strange, cryptic sequences. Encoding turns the ideal into a bunch of cryptic bytes, while decoding un-weirds a bunch of bytes back into the ideal state; something we can reason about. Some systems use different terms but the ideas still apply. For example: Java Strings are Unicode objects and you can encode/decode to/from byte-strings with them.</p>

<p>Now that you&rsquo;ve got the necessary terminology under your belt, let&rsquo;s prevent text handling problems in our system by making a sandwich; a Unicode sandwich!</p>

<h2>Make a Unicode sandwich</h2>

<p><em>Analogy credit</em>: <a href="http://nedbatchelder.com/">Ned Batchelder</a> coined the Unicode sandwich analogy in his <a href="http://nedbatchelder.com/text/unipain.html">Pragmatic Unicode</a> presentation at PyCon 2012 (<a href="http://youtu.be/sgHbC6udIqc">video</a>). It&rsquo;s so clever that I can&rsquo;t resist re-using it in this article!</p>

<p>  <img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/unicode-sandwich.png" title="The unicode sandwich" >
  <a href="http://www.flickr.com/photos/nofeel/4106942084/">Original image</a></p>

<p>In this analogy the pieces of bread on the top and bottom are regions of your code where you deal with byte-strings. The meat in the middle is where your system deals in Unicode objects. The top bread is input into your system such as database query results, file reads or HTTP responses. The bottom bread is output from your system such as writing files or sending HTTP responses. The meat is your business logic.</p>

<h3>Good sandwiches are meaty</h3>

<p>Your goal is to keep the bread thin and the meat thick. You can achieve this by decoding from byte-strings to Unicode objects as early as you can; perhaps immediately after arrival from another system. Similarly, you should do your encoding from Unicode objects into byte-strings at the last possible moment, such as right before transmitting text to another system.</p>

<p>Working with Unicode inside your system gives you a common ground of text handling that will largely avoid the errors we&rsquo;ve seen at the top of this article. If you don&rsquo;t deal in Unicode inside your system then you are limiting the languages you support at best and exposing yourself to text handling bugs at worst!</p>

<h3>The best sandwich bread is UTF-8</h3>

<p>Your system ultimately needs to send and receive byte-strings at some point, so you must choose an encoding for your byte-strings. Encodings are not created equal! Some encodings only support one language. Some support only similar languages (for example, German and French but not Arabic). Never assume your system will only encounter languages you speak or write! Ideally you will choose encodings that support a great many languages.</p>

<p>UTF-8 is the best general purpose encoding for your byte-strings. You&rsquo;ll learn why UTF-8 is an excellent encoding choice later in this article in the <em>Unicode: One standard to rule them all</em> section. For now I recommend you:</p>

<ul>
<li>Choose UTF-8 for all byte-strings.</li>
<li>Configure your system to use this encoding explicitly. Do not rely on the parent system (OS, VM, etc.) to provide an encoding since system settings might change over time.</li>
<li>Document your encoding choice in both public facing and internal documentation.</li>
</ul>


<p>The UTF-8 encoding supports all the text you&rsquo;d ever want. Yet, in this imperfect world you might be forced to use a more limited encoding such as ISO-8859-1 or Windows-1252 when interfacing with other systems. Working with a limited encoding presents problems when decoding to and encoding from Unicode: not every encoding supports the full Unicode range of characters. You must test how your system converts between your byte-strings and Unicode objects. In other words, <em>test between the meat and the bread</em>.</p>

<h3>Testing between the meat and the bread</h3>

<p>The critical areas to test are where bytes strings are decoded to Unicode objects and where Unicode objects are encoded into byte-strings. If you&rsquo;ve followed the advice of this article thus far then the rest of your app logic should operate exclusively in Unicode objects. Here is a handy table of how to test regions of your system that encode and decode:</p>

<table border="1" style="line-height:20px;">
  <thead><tr><td><strong>Scenario</strong></td><td><strong>Test Strategy</strong></td></tr></thead>
  <tbody>
    <tr>
      <td>My input encoding doesn&#8217;t support full Unicode.</td>
      <td>Test that non-English<span style="font-size:10px; line-height:15px">†</span> characters are faithfully decoded to Unicode.</td>
    </tr>
    <tr>
      <td>My output encoding doesn&#8217;t support full Unicode.</td>
      <td>
        <p>Test that supported non-English characters are faithfully encoded to byte-strings.</p>
        <p>Test that your system behaves correctly<span style="font-size:10px; line-height:15px">‡</span> when asked to encode un-supported characters.</p>
      </td>
    </tr>
    <tr>
      <td>My input(output) encoding supports full Unicode.</td>
      <td>Test that non-English characters are faithfully decoded(decoded) to(from) Unicode.</td>
    </tr>
  </tbody>
</table>




<p style="font-size:10px; line-height:15px">† English characters and Arabic numerals (0 - 9) are bad test cases because their byte values are identical across many encodings.</p>




<p style="font-size:10px; line-height:15px">‡ <em>Correctly</em> is in the eye of the beholder. Some systems choose to raise an exception. Others choose to replace the offending character with a replacement character. Lastly, some systems simply omit the offending character. The choice is up to you, but they&#8217;re all terrible. Seriously, just use UTF-8.</p>


<h3>Unicode sandwich applies to new projects and legacy systems</h3>

<p>Using UTF-8 for I/O, Unicode inside and testing the in-between points will save you from pain and bugs. If you&rsquo;re building a new system then you have the opportunity to design it with Unicode in mind. If you have an existing system, it is worth your time to audit how your system handles text.</p>

<p>With the practical stuff out of the way, let&rsquo;s dive deeper into computers and text!</p>

<h2>Part III &ndash; Encodings, Unicode and how computers handle text</h2>

<p>We&rsquo;ve talked about how you should use Unicode, encodings and byte-strings in your system to handle text. You may be wondering why text handling is so painful at times. Why are there so many encodings and why don&rsquo;t they all work together in harmony? I&rsquo;ll attempt to explain a bit of history behind text handling in computers. Understanding this history should shed some light on why text handling can be so painful.</p>

<p>To make things interesting, let&rsquo;s pretend we are inventing how computers will handle text. Also assume we live in the United States and speak only English. That&rsquo;s a pretty ignorant assumption for real world software development, but it simplifies our process.</p>

<h3>ASCII: Works great (if you want to ignore most of the world)</h3>

<p>Our challenge is to invent how computers handle text. Morse code is an encoding that pre-dates digital computers but provides a model for our approach: Each character has a transmission sequence of dots and dashes to represent it. We&rsquo;ll need to make a few changes and additions though&hellip;</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/morse-code.png" title="Morse code" >
<a href="http://commons.wikimedia.org/wiki/File:International_Morse_Code.svg">Image source</a></p>

<p>Rather than dots and dashes we can use 1&rsquo;s and 0&rsquo;s (<a href="http://en.wikipedia.org/wiki/Binary_number">binary</a>). Let&rsquo;s also use a consistent number of bits per character so that it&rsquo;s easy to know when one character ends and another begins. To support US English we need to map a binary sequence to each of the following:</p>

<ul>
<li>a-z</li>
<li>A-Z</li>
<li>0-9</li>
<li>&ldquo; &rdquo;(space)</li>
<li>!&ldquo;#$%&amp;&lsquo;()*+,&ndash;./:;&lt;=>?@[\]^_`{|}~</li>
<li>Control characters like &ldquo;ring a bell&rdquo;, &ldquo;make a new line&rdquo;, etc.</li>
</ul>


<p>That&rsquo;s 96 printable characters and some control characters for a total of 128 characters. 128 is 2<sup>7</sup>, so we can send these characters in seven-bit sequences. Since computers use eight-bit bytes, let&rsquo;s decide to send eight bits per character but ignore the last bit. We have just invented the <a href="https://en.wikipedia.org/wiki/ASCII">ASCII encoding</a>!</p>

<p>ASCII forms the root influence of many text encodings still used today. In fact, at one time ASCII was the law: U.S. President Lyndon B. Johnson <a href="http://www.presidency.ucsb.edu/ws/index.php?pid=28724">mandated</a> that all computers purchased by the United States federal government support ASCII in 1968.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/johnson.jpg" title="President Lyndon Johnson" >
<a href="http://commons.wikimedia.org/wiki/File:37_Lyndon_Johnson_3x4.jpg">Image source</a></p>

<h3>International and OEM standards: Supporting other languages</h3>

<h4>Starting with similar languages to US English</h4>

<p>We need more space to pack in more symbols if we want to support other languages and other symbols like currencies. It seems reasonable that people typically deal with a block of languages that are geographically or politically related, and when we&rsquo;re lucky those languages share many of the same symbols. Given that assumption we can create several standards; each one for a block of languages!</p>

<p>For each block, we can keep the first 128 characters as-is from ASCII (identical bit sequences) so that the US English characters and Arabic numerals are still supported. We can then use the eighth bit for data instead of ignoring it. That would give us eight bits per character and a total of 256 characters to work with (double ASCII&rsquo;s paltry 128). Now let&rsquo;s apply that eight bit.</p>

<p>A bunch of countries in Western Europe use the same latin alphabet plus special <a href="http://en.wikipedia.org/wiki/Diacritic">diacritics</a> (also known as <em>accent marks</em>) like ü or é or ß. In fact, we can pack enough extra characters in those last 128 slots to support 29 other languages like Afrikaans, German, Swahili and Icelandic. Our Western European language block encoding is ready! We call this type of encoding a single-byte encoding because every character is represented by exactly one byte.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/1252.png" title="Windows 1252 code page" >
<a href="https://commons.wikimedia.org/wiki/File:Windows-1252.svg">Image source</a></p>

<h4>Additional single byte encodings for other language blocks</h4>

<p>We can repeat the same process we used to create our Western European language encoding to develop other single-byte encodings for other language blocks; each a 256 character set! To give one more example, let&rsquo;s build a single byte coding for Arabic.</p>

<p>Again, we take the first 128 ASCII characters as-is, then fill up the last 128 with the <a href="http://www.omniglot.com/writing/arabic.htm">Arabic alphabet</a>  We&rsquo;ve got some space left over. Arabic has some diacritics as well, so let&rsquo;s use some of the leftover slots to hold diacritic marks that are only valid when combined with other letters.</p>

<p>Some languages don&rsquo;t even fit in 256 characters. Chinese, Japanese and Korean for example. That&rsquo;s OK, we&rsquo;ll just use multiple bytes per character to get more room. As you may have guessed, these encodings are called <em>multibyte encodings</em>. Sometimes we choose to use the same number of bytes for every character (<em>fixed width</em> multibyte encodings) and sometimes we might choose to use different byte lengths (<em>variable width</em> multibyte encodings) to save space.</p>

<h3>Ratifying our encodings to standards</h3>

<p>After we&rsquo;ve built several of these encodings (Russian, Greek, Simplified Chinese, etc.) we can ratify them as international standards such as <a href="https://en.wikipedia.org/wiki/ISO_8859">ISO-8859</a> for single byte encodings. We previously built <a href="http://en.wikipedia.org/wiki/ISO/IEC_8859-1">ISO-8895-1 (Western European)</a> and <a href="http://en.wikipedia.org/wiki/ISO/IEC_8859-6">ISO-8859-6 (Latin/Arabic)</a>. International standards for multibyte encodings exist too. People who use the same standard can communicate without problems.</p>

<p>The international standards like ISO-8895 are only part of the story. Companies like Microsoft and IBM created their own standards (so-called <em>OEM standards</em> or <em>code pages</em>). Some OEM standards map to international standards, some almost-but-not-quite map (see <a href="http://en.wikipedia.org/wiki/Windows-1252">Windows-1252</a>) and some are completely different.</p>

<h3>Our standards have problems</h3>

<p>Our standards and code pages are better than ASCII but there are a number of problems remaining:</p>

<ul>
<li>How do we intermix different languages in the same document?</li>
<li>What if our standards run out of room for new symbols?</li>
<li>There is no rosetta stone to allow communication between systems that use different encodings.</li>
</ul>


<p>Enter Unicode.</p>

<h2>Unicode: One standard to rule them all</h2>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-08-02-the-plain-text-is-a-lie/ring.png" title="The ring of power" >
<a href="http://commons.wikimedia.org/wiki/File:Unico_Anello.png">Image source</a></p>

<p>As mentioned earlier, Unicode is a single standard supporting thousands of languages. Unicode addresses the limitations of byte encodings by operating at a higher level than simple byte representations of characters. The foundation of Unicode is an über list of symbols chosen by a multinational committee.</p>

<p>Unicode keeps a gigantic numbered list of all the symbols of all the supported languages. The items in this list are called <em>code points</em> and are not concerned with bytes, how computers represent them, or what they look like on screen. They&rsquo;re just numbered items, like:</p>

<p><span style="font-size:24px;">a</span> <em>LATIN SMALL LETTER A</em> &ndash; U+0061</p>

<p><span style="font-size:24px;">東</span> <em>Pinyin: dōng, Chaizi: shi,ba,ri</em> &ndash;  U+6771</p>

<p><span style="font-size:24px;">☃</span> <a href="http://unicodesnowmanforyou.com/">SNOWMAN</a> &ndash; U+2603</p>

<p>We have virtually unlimited space to work with. The Unicode standards supports a maximum of  1,114,112 items. That is more than enough to express the world&rsquo;s active written languages, some historical languages and miscellaneous symbols. Some of the slots are even undefined and left to the user to decide what they mean. These spaces have been used for wacky things like <a href="https://en.wikipedia.org/wiki/Klingon_alphabets#ConScript_Unicode_Registry">Klingon</a> and Elvish.</p>

<p>Fun fact: Apple Inc. <a href="https://en.wikipedia.org/wiki/Private_Use_Areas#Vendor_use">uses</a> U+F8FF in the Private Use Area of Unicode for their logo symbol (<span style="font-size:24px;"></span>). If you don&rsquo;t see the Apple logo in parenthesis in the preceding sentence, then your system doesn&rsquo;t agree with Apple&rsquo;s use of U+F8FF.</p>

<p>OK, we have our gigantic list of code points. All we need to do is devise an encoding scheme to encode unicode objects (which now we know are lists of code points) into byte-strings for transmission over the wire to other systems.</p>

<h3>UTF-8</h3>

<p>UTF-8 encodes every Unicode code point in between one and four byte sequences. Here are some cool features of UTF-8:</p>

<ul>
<li><em>Popularity</em> &ndash; It&rsquo;s the dominant encoding of the world wide web <a href="http://googleblog.blogspot.com/2010/01/unicode-nearing-50-of-web.html">since 2010</a>.</li>
<li><em>Simplicity</em> &ndash; No need to <a href="http://en.wikipedia.org/wiki/Byte_order_mark">transmit byte order information</a> or worry about <a href="http://en.wikipedia.org/wiki/Endianness">endianness</a> in transmissions.</li>
<li><em>Backwards compatibility</em> &ndash; The first 128 byte sequences are identical to ASCII.</li>
</ul>


<h3>UCS-2: Old and busted</h3>

<p>UCS-2 is a fixed width, two-byte encoding. In the mid-nineties, Unicode added code points that cannot be expressed in the two-byte system. Thus, UCS-2 is deprecated in favor of UTF-16.</p>

<ul>
<li>UCS-2 was the original Java String class&rsquo;s internal representation</li>
<li>C Python 2 and 3 use UCS-2 if compiled with default options</li>
<li>Microsoft Windows OS API used UCS-2 prior to Windows 2000</li>
</ul>


<h3>UTF-16: UCS-2++</h3>

<p>UTF-16 extends UCS-2 by adding support for the code points that can&rsquo;t be expressed in a two-byte system. You can find UTF-16 in:</p>

<ul>
<li>Windows 2000 and later&rsquo;s OS API</li>
<li>The Java String class</li>
<li>.NET environment</li>
<li>OS X and iOS&rsquo;s NSString type</li>
</ul>


<h3>UTF-32: Large bytes, simple representation</h3>

<p>UTF-32 is a simple 1:1 mapping of code points to four-byte values. C Python uses UTF-32 for internal representation of Unicode if compiled with a certain flag.</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve seen how text handling can go wrong. We&rsquo;ve learned how to design and test our systems with Unicode in mind. Finally, we&rsquo;ve learned a bit of history of text encodings. There is a lot more to the topic of text, but for now I ask you do to the following:</p>

<ol>
<li>Examine your system to see if you&rsquo;re using Unicode inside</li>
<li>Use UTF-8 when reading and writing data</li>
<li>Know that the plain text is a lie!</li>
</ol>


<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShipIt - 24-hour Hackathon for Millennium+ Platform Dev]]></title>
    <link href="http://engineering.cerner.com/blog/shipit-hackathon-mplus/"/>
    <updated>2014-07-01T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/shipit-hackathon-mplus</id>
    <content type="html"><![CDATA[<p>At the end of March, some of our teams held their first 24-hour hackathon, titled ShipIt: Millennium+ Services FedEx Day. We had 41 participants, in 15 teams working on 15 unique projects. The idea was inspired by several teams spending a few hours every so often to work on different projects. After reading about <a href="https://www.atlassian.com/company/about/shipit">Atlassian’s</a> hack days, we decided to hold one.</p>

<p>The event was initially announced early in February, to give teams time to work this into their project plans. The schedule was to start at 10 am on a Thursday and wrap-up at 10 AM on Friday. Teams then presented their awesome projects and then were free to leave for the weekend (and catch-up on some sleep). Each team was free to choose the project they wanted to work on, with the limitation added that they should work on something which can be deployed somewhere in 24 hours (there were bonus points involved for deployed projects).  The winning prize not only included bragging rights, but also the ‘Golden Keyboard’, which will be a traveling trophy.</p>

<p>Behold, the Golden Keyboard:</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-07-01-shipit-hackathon-mplus/golden-keyboard.jpg" title="Golden Keyboard" ></p>

<p>We had reserved a large room off campus to get everyone away from their daily routines. Teams immediately jumped into their projects as soon as the hack day started on March 27th. Plenty of food and snacks were on hand, with lunch and dinner delivered to keep everyone fed. A hackavision dashboard (Sinatra application which subscribed to a list of atom feeds) was created, to track all the github commits by the teams.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-07-01-shipit-hackathon-mplus/hackavision.jpg" title="Hackavision" ></p>

<p>The projects had amazing breadth. These include <a href="http://www.neo4j.org/">Neo4j</a>, <a href="http://riemann.io/">Riemann</a>, <a href="http://capistranorb.com/">Capistrano</a> and languages such as Ruby and Clojure. Teams not only learned new languages and projects in the 24 hours, but also had most of them fully functional and deployed at the end of the hackathon.</p>

<p>There were other activities as well, such as playing Xbox and watching the NCAA Basketball Tournament, which provided to be great breaks throughout the night. Motivational movies, like <a href="http://www.imdb.com/title/tt0107977/">Robin Hood: Men in Tights</a>, were also on tap through the night.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-07-01-shipit-hackathon-mplus/fifa.jpg" title="FIFA" ></p>

<p>By 10 am on Friday morning on March 28th, everyone was ready to present their projects. We had four judges representing different areas of expertise. The demos were awesome and judges had a tough time picking the top three projects. Third place went to the SplunkOverflow team, who worked on a Maven plugin that would build site documentation for Thrift RPC services. Second place went to the Short Circuit team, who improved the performance of hash calculations in our <a href="https://github.com/apache/incubator-storm">Storm</a> topologies. First place (and the Golden Keyboard) went to the Minions team, who created &ldquo;lando&rdquo;, a set of services that supported monitoring and management tasks on JVM-based Thrift RPC services.</p>

<p>All in all, it was an exciting 24 hours where teams showed their innovative abilities. All the projects were demo’ed to a larger audience about a week later. Most of the projects started on during ShipIt are being enhanced further, by the teams during their team level hack time or scheduled projects.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-07-01-shipit-hackathon-mplus/winners.jpg" title="Winners" ></p>

<p>This was our first hackathon, but it won’t be our last! We will have at least one more later this year and plan on a recurring event, with the Golden Keyboard traveling around with the winning team. It was amazing to see what people can do in a short amount of time and with the flexibility of choosing what you want to work on, the end result will always be something cool. We hope to continue the innovative thinking, not only by team level hack days, but having larger hack days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling People With Apache Crunch]]></title>
    <link href="http://engineering.cerner.com/blog/scaling-people-with-apache-crunch/"/>
    <updated>2014-05-09T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/scaling-people-with-apache-crunch</id>
    <content type="html"><![CDATA[<h2>Starting the Big Data Journey</h2>

<p>When a company first starts to play with Big Data it typically involves a small team of engineers trying to solve a specific problem.  The team decides to experiment with scalable technologies either due to outside guidance or research which makes it applicable to their problem.  The team begins with the basics of Big Data spending time learning and prototyping.  They learn about <a href="http://hadoop.apache.org/">HDFS</a>, flirt with <a href="http://hbase.apache.org/">HBase</a> or other NoSQL, write the required WordCount example, and start to figure out how the technologies can fit their needs.  The group&rsquo;s immersion into Big Data deepens as they start to move beyond a prototype into a real product.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-05-09-scaling-people-with-apache-crunch/team_bigdata.png" title="Team using Big Data" ></p>

<p>The company sees the success of using Big Data technologies and the possibilities to solve difficult problems, tackle new endeavors, and open new doors.  The company has now shifted its scalability problem out from the technical architecture into a people problem.  The small team of experts cannot satisfy the demand and transferring their accumulated knowledge to new teams is a significant investment.  Both new and experienced engineers face a steep learning curve to get up to speed.  Learning the API is not difficult but challenges typically oocur when applying the WordCount example to complex problems.   Making the mental jump from processing homogeneous data which produce a single output to a complex processing pipeline involving heterogeneous inputs, joins, and multiple outputs is difficult for even a skilled engineer.</p>

<p>Cerner has developed a number of Big Data solutions each demonstrating the 3 V&rsquo;s of data (variety, velocity, and volume).  The complexity of the problems being solved, evolving functionality, and required integration across teams led Cerner to look beyond simple MapReduce.  Cerner began to focus on how to construct a processing infrastructure that naturally aligned with the way the processing is described.  Looking through the options available for processing pipelines including <a href="http://hive.apache.org/">Hive</a>, <a href="http://pig.apache.org/">Pig</a>, and <a href="http://www.cascading.org/">Cascading</a>, Cerner finally arrived at using <a href="http://crunch.apache.org/">Apache Crunch</a>.  Using Crunch&rsquo;s concepts, we found that we were easily able to translate how we described a problem into concepts we can code.  Additionally the API was well suited for our complicated data models and building integration contracts between teams.</p>

<p>When we describe a problem we often talk about its flow through the various processing steps.  The processing flow is comprised of data from multiple sources, several transformations, various joins, and finally the persistence of the data.  Looking at an example problem of transforming raw data into a normalized object for downstream consumers we might encounter a problem similar to the diagram below.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-05-09-scaling-people-with-apache-crunch/example_processing_pipeline.png" title="Example Processing Problem" ></p>

<p>If we apply this problem to the raw MapReduce framework we begin to see problems absent in the standard WordCount example.  The heterogeneous data and models, the custom join logic, and follow up grouping by key all could result in extra code or difficulty fitting this processing into a single MapReduce job.  When our problem expands to multiple MapReduce jobs we now have to write custom driver code or bring in another system like <a href="http://oozie.apache.org/">Oozie</a> to chain the workflow together.  Additionally while we could fit the steps neatly into 1-2 MapReduce jobs that careful orchestration and arrangement could become imbalanced as we introduce new processing needs into the workflow.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-05-09-scaling-people-with-apache-crunch/example_processing_pipeline_new_functionality.png" title="Example Processing Problem with more functionality" ></p>

<p>This problem is common and fairly basic with respect to some of the processing needs we faced at Cerner.  For the experienced MapReduce developers this problem might cause a momentary pause to design it but that is due to your expertise.  For those less skilled imagine being able to break this problem down into the processing steps you understand and POJO like models of which you are already familiar.  Breaking this problem down using Apache Crunch we can see how we can articulate the problem and still take advantage of the processing efficiency of MapReduce.</p>

<h2>Building a Processing Pipeline with Apache Crunch</h2>

<p>Apache Crunch allows developers to construct complicated processing workflows into <a href="http://crunch.apache.org/user-guide.html#mrpipeline">pipelines</a>.  Pipelines are directed acyclic graphs (DAG) comprised of input data that is then transformed through functions and groupings to produce output data.  When a developer is done constructing the pipeline Apache Crunch will calculate the appropriate processing steps and submit the steps to the execution engine.  In this example we will talk about using Apache Crunch in the context of MapReduce but it also supports running on <a href="http://spark.apache.org/">Apache Spark</a>.  It should be noted that pipelines are lazily executed.  This means that no work will be done until the pipeline is executed.</p>

<p>To begin processing we need a pipeline instance on which we will construct our DAG.  To create a MRPipeline we need the typical Hadoop <a href="https://hadoop.apache.org/docs/r2.2.0/api/org/apache/hadoop/conf/Configuration.html">Configuration</a> instance for the cluster and <a href="http://hadoop.apache.org/docs/r2.3.0/api/org/apache/hadoop/mapreduce/Job.html#setJarByClass(java.lang.Class">the driver class</a>) for the processing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Pipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MRPipeline</span><span class="o">(</span><span class="n">Driver</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a pipeline instance available the next step is to describe the inputs to the processing using at least one Crunch <a href="http://crunch.apache.org/user-guide.html#rwdata">Source</a>.  A pipeline must contain at least one source but could read from multiple.  Apache Crunch provides implementations for the typical inputs such as Sequence Files, HFiles, Parquet, Avro, HBase, and Text.  As an example if we were to read data out of a text file we might write code like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PType</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ptype</span> <span class="o">=</span> <span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">();</span>
</span><span class='line'><span class="n">PCollection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">refDataStrings</span> <span class="o">=</span> <span class="n">pipeline</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="k">new</span> <span class="n">TextFileSource</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">ptype</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code utilizes the TextFileSource to generate a collection of Java Strings from files at a certain path.  The code also introduces two additional Apache Crunch concepts of <a href="http://crunch.apache.org/user-guide.html#datamodel">PCollections</a> and <a href="http://crunch.apache.org/user-guide.html#serde">PTypes</a>.  A PCollection represents potential data elements to process.  Since a pipeline is lazily executed it is not a physical representation of all of the elements.  A PCollection cannot be created but can be read or transformed.  Apache Crunch also has special forms of PCollections, PTable and PGroupedTable, which are useful in performing join operations on the data.  A PType is a concept that hides serialization and deserialization from pipeline developers.  In this example the developer is using native Java strings instead of dealing with wrapper classes like Writable&rsquo;s Text class.</p>

<p>Processing based off of Java Strings is error prone so typically developers would transform the data into a model object that is easier to work with.  Transformation of a PCollection is done through a <a href="http://crunch.apache.org/user-guide.html#dataproc">DoFn</a>.  A DoFn processes a single element of the PCollection into zero or many alternate forms depending on its logic.  The bulk of a processing pipeline&rsquo;s logic resides in implementations of DoFn.  Custom implementations of a DoFn requires extending the DoFn class as well as defining the input and output types.  This allows Crunch to provide compile time checking as transformations are applied to collections.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">ConvertReferenceDataFn</span> <span class="kd">extends</span> <span class="n">DoFn</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span> <span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="n">Emitter</span><span class="o">&lt;</span><span class="n">RefData</span><span class="o">&gt;</span> <span class="n">emitter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">RefData</span> <span class="n">data</span> <span class="o">=</span> <span class="c1">//processing logic;</span>
</span><span class='line'>       <span class="n">emitter</span><span class="o">.</span><span class="na">emit</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">PType</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ptype</span> <span class="o">=</span> <span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">();</span>
</span><span class='line'><span class="n">PCollection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">refDataStrings</span> <span class="o">=</span> <span class="n">pipeline</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="k">new</span> <span class="n">TextFileSource</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">ptype</span><span class="o">));</span>
</span><span class='line'><span class="n">PCollection</span><span class="o">&lt;</span><span class="n">RefData</span><span class="o">&gt;</span> <span class="n">refData</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">refStrings</span><span class="o">.</span><span class="na">parallelDo</span><span class="o">(</span><span class="k">new</span> <span class="n">ConvertReferenceDataFn</span><span class="o">(),</span> <span class="n">Avros</span><span class="o">.</span><span class="na">records</span><span class="o">(</span><span class="n">RefData</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recalling the previous example processing problem we see that we need to perform join and grouping operations based on a key.  Instead of converting the strings into a RefData object it would actually be better to convert the string into a key/value pair (e.g. Pair&lt;String, RefData>).  Apache Crunch has a PTable&lt;K, V>, which is simply a special form of PCollection&lt;Pair&lt;K, V>>.  Adjusting the function we can instead produce the key/value pair.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">ConvertReferenceDataFn</span> <span class="kd">extends</span> <span class="n">DoFn</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;&gt;{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span> <span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="n">Emitter</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;&gt;</span> <span class="n">emitter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">RefData</span> <span class="n">data</span> <span class="o">=</span> <span class="c1">//processing logic;</span>
</span><span class='line'>       <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="c1">//extract id;</span>
</span><span class='line'>       <span class="n">emitter</span><span class="o">.</span><span class="na">emit</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">PType</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ptype</span> <span class="o">=</span> <span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">();</span>
</span><span class='line'><span class="n">PCollection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">refDataStrings</span> <span class="o">=</span> <span class="n">pipeline</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="k">new</span> <span class="n">TextFileSource</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="n">ptype</span><span class="o">));</span>
</span><span class='line'><span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;</span> <span class="n">refData</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">refStrings</span><span class="o">.</span><span class="na">parallelDo</span><span class="o">(</span><span class="k">new</span> <span class="n">ConvertReferenceDataFn</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">Avros</span><span class="o">.</span><span class="na">tableOf</span><span class="o">(</span><span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">(),</span> <span class="n">Avros</span><span class="o">.</span><span class="na">records</span><span class="o">(</span><span class="n">RefData</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Utilizing the PTable&lt;String, RefData> collection we could then <a href="http://crunch.apache.org/user-guide.html#joins">join</a> that collection with another similarly keyed PTable using one of the many prebuilt implementations.  The built in join functionality helps to avoid developing custom implementations of a common data processing pattern.</p>

<p>More functions are applied to the joined data to continue the processing workflow.  The processing of the data is distributed in separate tasks across the cluster.  In the example problem we need all of the data for a <a href="http://crunch.apache.org/user-guide.html#gbk">given key to be grouped</a> to a single task for processing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'><span class="n">PGroupedTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;</span> <span class="n">groupedModels</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">groupByKey</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>A pipeline requires at least one collection of data to be persisted to a <a href="http://crunch.apache.org/user-guide.html#targets">target</a>.  Crunch provides the standard targets for data but consumer can also easily create new custom inputs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//persist Avro models</span>
</span><span class='line'><span class="n">pipeline</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">models</span><span class="o">,</span> <span class="k">new</span> <span class="n">AvroFileTarget</span><span class="o">(</span><span class="n">path</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>When constructing the processing pipline for the example problem we would end up with an executable program that looks like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">Pipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MRPipeline</span><span class="o">(</span><span class="n">Driver</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">conf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Read data from sources</span>
</span><span class='line'>    <span class="n">PType</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ptype</span> <span class="o">=</span> <span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;</span> <span class="n">refDataStrings</span> <span class="o">=</span> <span class="n">pipeline</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="k">new</span> <span class="n">TextFileSource</span><span class="o">(</span><span class="n">path1</span><span class="o">,</span> <span class="n">ptype</span><span class="o">));</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefModel</span><span class="o">&gt;</span> <span class="n">refModelStrings</span> <span class="o">=</span> <span class="n">pipeline</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="k">new</span> <span class="n">TextFileSource</span><span class="o">(</span><span class="n">path1</span><span class="o">,</span> <span class="n">ptype</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Convert the Strings into models</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;</span> <span class="n">refData</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">refStrings</span><span class="o">.</span><span class="na">parallelDo</span><span class="o">(</span><span class="k">new</span> <span class="n">ConvertReferenceDataFn</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">Avros</span><span class="o">.</span><span class="na">tableOf</span><span class="o">(</span><span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">(),</span> <span class="n">Avros</span><span class="o">.</span><span class="na">records</span><span class="o">(</span><span class="n">RefData</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefModel</span><span class="o">&gt;</span> <span class="n">refModel</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">refStrings</span><span class="o">.</span><span class="na">parallelDo</span><span class="o">(</span><span class="k">new</span> <span class="n">ConvertReferenceModelFn</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">Avros</span><span class="o">.</span><span class="na">tableOf</span><span class="o">(</span><span class="n">Avros</span><span class="o">.</span><span class="na">strings</span><span class="o">(),</span> <span class="n">Avros</span><span class="o">.</span><span class="na">records</span><span class="o">(</span><span class="n">RefModel</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Data separate input together.</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">RefData</span><span class="o">,</span> <span class="n">RefModel</span><span class="o">&gt;&gt;</span> <span class="n">joinedDataModel</span> <span class="o">=</span> <span class="n">refModel</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">refData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Apply a similar DoFn to convert the Pair&lt;RefData, RefModel&gt; into a single object</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;</span> <span class="n">models</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Filter out data that is not useful</span>
</span><span class='line'>    <span class="n">PTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;</span> <span class="n">filteredModels</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="k">new</span> <span class="n">FilterModelFn</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Group the data by key to have all model instances with the same key in a single location</span>
</span><span class='line'>    <span class="n">PGroupedTable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;</span> <span class="n">groupedModels</span> <span class="o">=</span> <span class="n">filteredModels</span><span class="o">.</span><span class="na">groupByKey</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Convert the grouped Models into a single model object if they share the same key.</span>
</span><span class='line'>    <span class="n">PCollection</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;</span> <span class="n">personModels</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">groupedModels</span><span class="o">.</span><span class="na">parallelDo</span><span class="o">(</span><span class="k">new</span> <span class="n">ConvertPersonModelFn</span><span class="o">(),</span> <span class="n">Avros</span><span class="o">.</span><span class="na">records</span><span class="o">(</span><span class="n">PersonModel</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Write out the Person Model objects</span>
</span><span class='line'>    <span class="n">pipeline</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">personModels</span><span class="o">,</span> <span class="k">new</span> <span class="n">AvroFileTarget</span><span class="o">(</span><span class="n">path</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//At this point the pipeline has been constructed but nothing executed.  </span>
</span><span class='line'>    <span class="c1">//Therefore tell the pipeline to execute.</span>
</span><span class='line'>    <span class="n">PipelineResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">pipeline</span><span class="o">.</span><span class="na">done</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">ConvertReferenceDataFn</span> <span class="kd">extends</span> <span class="n">DoFn</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;&gt;{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span> <span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="n">Emitter</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefData</span><span class="o">&gt;&gt;</span> <span class="n">emitter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">RefData</span> <span class="n">data</span> <span class="o">=</span> <span class="c1">//processing logic;</span>
</span><span class='line'>       <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="c1">//extract id;</span>
</span><span class='line'>       <span class="n">emitter</span><span class="o">.</span><span class="na">emit</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">ConvertReferenceModelFn</span> <span class="kd">extends</span> <span class="n">DoFn</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefModel</span><span class="o">&gt;&gt;{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span> <span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="n">Emitter</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">RefModel</span><span class="o">&gt;&gt;</span> <span class="n">emitter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">RefModel</span> <span class="n">model</span> <span class="o">=</span> <span class="c1">//processing logic;</span>
</span><span class='line'>       <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="c1">//extract id;</span>
</span><span class='line'>       <span class="n">emitter</span><span class="o">.</span><span class="na">emit</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">model</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">FilterModelFn</span> <span class="kd">extends</span> <span class="n">Filter</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;&gt;{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">filter</span> <span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Model</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">boolean</span> <span class="n">include</span> <span class="o">=</span> <span class="c1">//logic to apply to the model</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">include</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">ConvertPersonModelFn</span> <span class="kd">extends</span> <span class="n">MapFn</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Model</span><span class="o">&gt;&gt;&gt;{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="n">PersonModel</span> <span class="nf">map</span> <span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Model</span><span class="o">&gt;&gt;</span> <span class="n">models</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">PersonModel</span> <span class="n">model</span> <span class="o">=</span> <span class="c1">//apply grouping logic to generate model from many items.</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">model</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is very easy to see how the processing steps and flow of the original diagram can be mapped to Apache Crunch concepts.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-05-09-scaling-people-with-apache-crunch/example_processing_pipeline_crunch_concepts.png" title="Crunch Concepts Applied to Processing" ></p>

<p>Executing the code as written above would cause Apache Crunch to calculate the execution graph to be spread over two MapReduce jobs.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-05-09-scaling-people-with-apache-crunch/pipeline_mr.png" title="Pipeline Execution" ></p>

<p>In this case having a MapReduce job being reduce only is less than ideal but the team has been able to focus on correctness and functionality first.  Focus can now be shifted on performance tuning or adjusting algorithms as appropriate.  The solid foundation of functionality and the simplicity of the concepts allows developers to easily understand how the processing pipeline.  The ease of understanding helps to allow the team to refactor and iterate with confidence.</p>

<p>This blog post is essentially my script for my <a href="http://apacheconnorthamerica2014.sched.org/event/37a39cc1b611e53ea5b6e348786337ad?iframe=no&amp;w=100&amp;sidebar=yes&amp;bg=no#.U1hyq-ZdVDw">North America ApacheCon 2014 presentation</a>.  Slides are available <a href="http://events.linuxfoundation.org/sites/events/files/slides/Simplifying%20Big%20Data%20with%20Apache%20Crunch.pdf">here</a>.</p>

<h2>Links</h2>

<ul>
<li><a href="http://crunch.apache.org/user-guide.html">Crunch User Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating From Eclipse 3.X to Eclipse 4.X - the iAware Story]]></title>
    <link href="http://engineering.cerner.com/blog/migrating-from-eclipse-3.x-to-eclipse-4.x-the-iaware-story/"/>
    <updated>2014-03-18T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/migrating-from-eclipse-3.x-to-eclipse-4.x-the-iaware-story</id>
    <content type="html"><![CDATA[<p><em>This is the blog form of the talk Migrating from Eclipse 3.X to Eclipse 4.X &ndash; The iAware Story at <a href="https://www.eclipsecon.org/">EclipseCon 2014</a>.</em></p>

<p>The iAware development team was formed in late 2007 and in a little under six months we developed our first solution, CareAware CriticalCare, a dashboard application written using the Eclipse RCP targeted for use in ICU settings. The goal of this application was to provide clinicians with a complete picture of the patient’s status and to do it in a manner that was contextually relevant; meaning that related information was presented together. Doing so allows them to make rapid and timely clinical decisions.</p>

<p>It was from this first solution that we began the process of building the software development platform. We&rsquo;ve created a number of reusable and consumable assets that can simplify and speed up development; chief among them is our Application, Platform and Gadget frameworks. Our application framework manages the startup and initialization of applications built on the platform and allows those building solutions to define the layout (navigation bar and perspectives) of their running application. The platform framework provides management of the active application, contexts and navigation and is the connection point for gadgets to communicate with one another. The gadget framework is a wrapper for Eclipse views and provides a common set of operations and UI elements that provide a consistent look and feel across gadgets. It also handles context changes and user authorization for solutions.</p>

<p>We provide two different application types: Dashboard and Personalized. The dashboard application type is intended to be shown on large form factor displays, typically in patient rooms in an always-on operation mode. This type lacks personalization options, such as moving views around or adding or removing them as multiple users will be using the application and a consistent look needs to be maintained. The personalized application type is intended for multiple form factors, but it&rsquo;s primary use case is for laptops and mobile workstations with each user signing into the application with their own credentials. Because of this, we allow users to customize their perspectives by moving, adding or removing views. They can also add and remove perspectives and set preferences such as refresh time.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-03-18-migrating-from-eclipse-3.x-to-eclipse-4.x-the-iaware-story/careaware-critical-care-dashboard.png" title="Careaware Critical Care Dashboard" ></p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-03-18-migrating-from-eclipse-3.x-to-eclipse-4.x-the-iaware-story/careaware-critical-care-personalized.png" title="Careaware Critical Care Personalized" ></p>

<p>At our core, we develop a reusable application platform built on top of the Eclipse Rich Client Platform to provide the ability to create targeted healthcare workflow applications with the goal of allowing other development teams to focus on solution specific development without worrying about the infrastructure. This means that our team can take on the responsibility and work effort of updating to new Eclipse versions as they become available without having to pass that cost down to those teams that build solutions on our platform.</p>

<p>For the first four years or so, we did all of this platform development on top of the 3.x framework. A little over two years ago, we began the uplift process to 4.x, starting first with a feasibility study using 4.1.1 while taking advantage of the compatibility layer. While we wanted to dive in and have a straight e4 application, we had invested time and energy on platform projects based on 3.x that we couldn&rsquo;t afford to scrap, so we took it one step at a time. Additionally, our team and other teams at Cerner had solutions that Clients were using that expect them to continue to function as they had previously regardless of what we did under the hood.</p>

<p>During this feasibility study, we found around 50 items that we needed to address. Some issues were things that we were doing that happened to work in 3.x but no longer did in 4.x. Some were bugs that we either found already logged or we logged to Eclipse. A sampling of things found includes:</p>

<ul>
<li><p>One of the first things we found was that all views had a view menu whether there were items in it or not. After some checking, we found that there was a bug (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=319621">https://bugs.eclipse.org/bugs/show_bug.cgi?id=319621</a>) logged for this, and we worked with other contributors to come up with a solution. After it was determined that the correction wouldn&rsquo;t make it to 4.1.1, we modified the renderer (org.eclipse.e4.ui.workbench.renderers.swt) to never show the view menu for our views since we didn&rsquo;t use that functionality anyway.</p></li>
<li><p>Given the ability to save perspective layouts of our personalized applications, we quickly found that perspective saving was broken and identified a number of Eclipse bugs related to the problem. Again, because the issue wasn&rsquo;t due to be fixed until 4.2, we did our own serialization of the perspective layout and saved that data off into our preference store. After uplifting to 4.2, we removed most of that code and instead use the perspective XML.</p></li>
<li><p>We also came across another issue that was already logged (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=356252">https://bugs.eclipse.org/bugs/show_bug.cgi?id=356252</a>) where a perspective will be closed when all of its parts are closed. To resolve this, we added the Cleanup add-on and implemented a patch that was posted to the logged bug.</p></li>
<li><p>Another issue we ran into was with menu ordering. We had two different plug-ins contributing menu items to the main application menu and both of them declared that they were to be shown after the file menu item; however, we wanted one, Personalization, to show before the other, Help. Once we realized this, it was an easy fix to switch the declaration of the Personalization item to say that it should be before the Help item. While this was an issue with our code, it highlights the passivity problems that we had to be concerned about.</p></li>
<li><p>Another menu related issue was a dynamic menu that we were building that lists all of the available views for a particular perspective only listed one element. After some investigating, we found that our contribution class was extending ContributionItem instead of CompoundContributionItem as suggested by the Eclipse wiki. We switched the class our contribution was extending and our menu was once again working as expected. Nonetheless we logged a bug (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=354190">https://bugs.eclipse.org/bugs/show_bug.cgi?id=354190</a>) with respect to the ContributionItem since it was working in 3.7.</p></li>
<li><p>A handful of issues that we encountered centered on the icons for our various views and how they weren&rsquo;t being found. It was determined that the slash direction in the icon path was incorrect.</p></li>
<li><p>Another set of issues that we encountered centered on having new functionality that wasn&rsquo;t desired, such as extra preference pages in our preferences dialog and extra menu items in our help menu. An evaluation of the dependencies that were added corrected these issues.</p></li>
<li><p>For a variety of reasons, detached views is a feature that we needed to remove from applications. In 3.x we used the IWorkbenchPreferenceConstants.ENABLE_DETACHED_VIEWS preference. However, this property isn&rsquo;t supported in 4.x. Our workaround to this is to provide a custom implementation of the DnDAddon which takes away detached views altogether. We logged a bug for this situation: <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=357289">https://bugs.eclipse.org/bugs/show_bug.cgi?id=357289</a></p></li>
<li><p>We also found after uplifting that we had a number of jobs that started to fail sporadically due to authentication checks we had in place not having the necessary information. After investigating further, we found that some jobs that previously were executed after our users logged in were occurring before and as such threads in the job pool were being created without the correct subject in place and subsequent jobs would reuse these threads. We employed a two pronged approach to resolve this issue. We updated existing jobs to obtain the current subject on construction (from the access controller) of the job and then use the Subject.doAs call in the jobs run method. At the same time, we created an extension of the Job class that would do this for consumers.</p></li>
</ul>


<p>After demonstrating that we could move to 4.x, we began the process of making use of the new functionality that was available and to remove as much of our dependency on the compatibility layer as possible. To do that we added and customized the application model, defined a custom renderer to represent our UI and began removing extension points and implementations of 3.x interfaces in favor of dependency injection and behavioral annotations.</p>

<p>We utilize the application model both statically and dynamically within our solutions. In the static file we define commands and handlers for Exit and Show View, define the add-ons we&rsquo;re including and specify the top level UI elements and corresponding renderer. The add-ons that we consume include:</p>

<ul>
<li>CommandServiceAddon</li>
<li>ContextServiceAddon</li>
<li>BindingServiceAddon</li>
<li>CommandProcessingAddon</li>
<li>ContextProcessingAddon</li>
<li>BindingProcessingAddon</li>
<li>Customized version of CleanupAddon &ndash; keep perspectives open when all parts have been closed</li>
<li>Customized version of DnDAddon &ndash; disables detached views and forces the drop target to be a perspective</li>
<li>Customized version of MinMaxAddon &ndash; removed the minimize button from views</li>
</ul>


<p><img class="center" src="http://engineering.cerner.com/assets/2014-03-18-migrating-from-eclipse-3.x-to-eclipse-4.x-the-iaware-story/iaware-e4xmi.png" title="iAware e4xmi" ></p>

<p>The remaining UI elements, perspectives and parts, are contributed to the model dynamically through our application and gadget frameworks.</p>

<p>Within our application we have a couple of shared UI areas that reside outside of the perspective area and as such we needed to define a custom renderer factory for our container to achieve the same functionality that was found using IWorkbenchWindowConfigurer#createPageComposite(org.eclipse.swt.widgets.Composite) in 3.x.</p>

<p>Our renderer factory also removes the QuickAccess search field, a piece of functionality we don&rsquo;t want to include in our applications</p>

<p>The following diagram represents our UI model:</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2014-03-18-migrating-from-eclipse-3.x-to-eclipse-4.x-the-iaware-story/iaware-ui-model.png" title="iAware UI Model" ></p>

<p>The top pane, generally holds our navigation bar and toolbar contributions including lock and refresh. The bottom pane, generally holds our notification tray and status line UI elements. The iAware teams solutions don&rsquo;t currently make use of the left or right pane in any of our solutions but leave those options open to others building their own solutions.</p>

<p>The final piece of the uplift was to go through our various platform projects that were either implementing 3.x interfaces or were relying on singletons or static access to PlatformUI and use injection and behavioral annoations. This included changing our part implementation to no longer be an IViewPart and instead have it use the behavioral annotations @PostConstruct and @Focus.</p>

<p>We also wired in a lifecycle hander to make use of @PostContextCreate and @ProcessAdditions across our registries (namely our perspective, gadget) instead of being tied to the calls from the WorkbenchAdvisor and WorkbenchWindowAdvisor.</p>

<p>We also began use of the @Execute and @CanExecute annotations with a feature that we added to our gadget framework that allows solutions to contribute toolbar buttons for their gadgets.</p>

<p>One annotation that we don&rsquo;t make use of is the @Persist annotation as persistence is a feature that we avoid because we require users to start with a clean state each time they run the application.</p>

<p>That brings me to that last topic, where do we go from here. We&rsquo;ve begun the evaluation of 4.3 and have the evaluation of 4.4 on our roadmap when it becomes available.</p>

<p>Specifically we&rsquo;re working to bring in 4.3 before June in response to some changes to the rendering of menus that occurred between 4.1 and 4.2. We still define our menu items through extension points in a plugin.xml file and we&rsquo;d created an abstract class that allows other solutions to change the default menu text that we provided (most wanted to change &lsquo;iAware&rsquo; to &lsquo;File&rsquo;). Our application class then used this abstract class and the setText method on the menu item to change the text; however, we found in 4.2 that menu items that come from plugin.xml couldn&rsquo;t be changed in this manner. So, when we make the move to 4.3, we&rsquo;ll also change our menu contributions to come from the application model instead of extension points.</p>

<p>We will also re-evaluate workarounds that we&rsquo;ve added for earlier versions that are now fixed in the main line.</p>

<p>The final item is something we&rsquo;ve already been working on for a little while know but are really going after hard this year is moving to P2. We released our last version using features and products and we&rsquo;re continuing to play with how we can best leverage them to deliver our solutions to clients.</p>

<p>The introduction of Eclipse 4.x represented somewhat of a turning point for our team. While the process of uplifting was challenging at times, it was a great learning experience and it provided us the ability to enhance the functionality of the iAware platform, which was a huge benefit to our teams developing solutions. Integral to our ability to enhance the iAware platform was the fact that with 4.x we’re able to use native API where previously we wouldn’t have been able to accomplish it or it required us to use a workaround, usually entailing use of internal classes.  The work also lead to more involvement and participation in the Eclipse community by our team. We were involved in discussions in the forums, logged bugs and provided patches, which is a positive for all involved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sponsoring the Apache Software Foundation]]></title>
    <link href="http://engineering.cerner.com/2014/01/sponsoring-the-apache-software-foundation/"/>
    <updated>2014-01-28T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/2014/01/sponsoring-the-apache-software-foundation</id>
    <content type="html"><![CDATA[<p>Open source plays an integral role within engineering at Cerner. In addition to using open source software throughout our architecture, we <a href="http://engineering.cerner.com/2014/01/cerner-and-open-source/">recently released a few projects</a> back to the community via our <a href="https://github.com/cerner">Github organization</a>.</p>

<p>Today, we’re happy to announce that <a href="http://www.apache.org/foundation/thanks.html">Cerner is now a sponsor</a> of the non-profit <a href="http://www.apache.org/">Apache Software Foundation</a> (ASF). The ASF is home to several projects that are essential components in many of our systems. We’ve blogged previously about several of these projects: <a href="http://engineering.cerner.com/2013/02/composable-mapreduce-with-hadoop-and-crunch/">Hadoop, HBase, Crunch</a>, <a href="http://engineering.cerner.com/2013/03/cerner-and-tycho/">Maven</a>, and <a href="http://engineering.cerner.com/2013/02/near-real-time-processing-over-hadoop-and-hbase/">Storm</a>. In addition to these projects, there are dozens of other ASF projects that we use and have contributed to via patches and enhancements.</p>

<p>Sponsoring the ASF allows us to show support for their mission and to ensure the ASF can continue to provide infrastructure and resources for the open source projects they host.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Raft Protocol: A Better Paxos?]]></title>
    <link href="http://engineering.cerner.com/2014/01/the-raft-protocol-a-better-paxos/"/>
    <updated>2014-01-24T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/2014/01/the-raft-protocol-a-better-paxos</id>
    <content type="html"><![CDATA[<p>Among the many compelling talks that attendees come to expect every year at the Strange Loop conference was a <a href="https://thestrangeloop.com/sessions/raft-the-understandable-distributed-protocol">session</a> given by Ben Johnson that provided an overview of a new distributed consensus protocol originating from research at Stanford University, named <a href="http://raftconsensus.github.io/">Raft</a>.</p>

<h2>What is distributed consensus?</h2>

<p>Distributed consensus can be described as the act of reaching agreement among a collection of machines cooperating to solve a problem. With the rise of open source distributed computing and storage platforms, consensus algorithms have become essential tools for replication, and thus, serve to enhance resiliency by eliminating single points of failure.</p>

<p>Examples of distributed consensus in action can often be elusive because such protocols are ordinarily buried inside core systems, and consequently, are largely invisible to application developers. For example, a relational database in a clustered configuration would typically employ a consensus algorithm to coordinate commits with other replicas. And similarly, Apache ZooKeeper, a popular distributed synchronization service used in projects such as HBase and Solr, utilizes a consensus protocol to achieve fault-tolerance by replicating its configuration repository across many servers.</p>

<h2>Raft is about understandability and practicality</h2>

<p>The current Raft <a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf">paper</a> argues that while <a href="http://en.wikipedia.org/wiki/Paxos_%28computer_science%29">Paxos</a> has historically dominated both academic and commercial discourse with respect to distributed consensus, the protocol itself is too complicated to reason about and that a more understandable algorithm was needed, not only for educational purposes, but also to serve as a foundation for building practical systems.</p>

<p>An obvious question instinctively arises for the inquisitive reader: what makes Raft better than Paxos? Having personally implemented a replicated log using the Paxos algorithm, there was a natural curiosity in understanding how Raft approached the problem of solving consensus. It is worth noting, however, that comparing Raft and Paxos can be a bit misleading. Even though both address the fundamental problem of reaching consensus among a network of connected machines, Paxos is more academic in nature and primarily concerned with the mechanics of consensus, whereas Raft is oriented around the practical challenges of implementing a replicated log.</p>

<h2>Paxos is about theory</h2>

<p>The seminal work done by Leslie Lamport in 1989 with the design of the Paxos protocol was an important step forward in establishing a theoretical foundation for achieving consensus in asynchronous distributed systems. His contributions were largely academic and centered around reaching agreement on a single value, thus relying on software engineers to translate these ideas into practical solutions, such as replicated databases, which must decide on many values. However, the actual requirements necessary to build a real system, including areas such as leader election, failure detection, and log management, are not present in the Paxos specification, yet add a degree of complexity that almost always significantly alters the original protocol. This is precisely where the Raft designers correctly argue that the absence of specificity leads to great difficulty in applying Paxos to real world problems. A subsequent <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">paper</a> by Lamport in 2001 does an excellent job of making the original protocol accessible to practitioners, and to some degree, proposes techniques for designing a replicated log, but it stops short of being prescriptive in the way that Raft does.</p>

<h2>You say tomāto, I say tomäto</h2>

<p>Raft is unique in many ways compared to typical Paxos implementations, but despite those differences, both are grounded in a similar set of core principles. For example, Raft requires leader election to occur strictly before any new values can be appended to the log, whereas a Paxos implementation would make the election process an implicit outcome of reaching agreement. The Raft designers claim that doing so has the consequence of simplifying log management, particularly with respect to edge cases in which a succession of leadership changes can result in log discrepancies, but the tradeoff is that leader election in Raft is more complicated than its counterpart in Paxos.</p>

<p>What both protocols acknowledge, though, is that leader election is imperative if systems want to ensure progress. The notion of progress simply means that a system eventually does something useful. An important discovery in 1985, called the <a href="http://cs-www.cs.yale.edu/homes/arvind/cs425/doc/fischer.pdf">FLP Impossibility Result</a>, proved that consensus was impossible in asynchronous distributed systems with the presence of only one faulty process. The practical implication follows: a system that cannot reach consensus is a system that cannot make progress. To be clear, the finding did not state that consensus was unreachable, just that some executions cannot reach consensus in bounded time. As a consequence, leader election, combined with timeouts, is often used as a technique for eliminating a class of conditions under which reaching agreement could take an arbitrarily long period of time. Interestingly, the Paxos algorithm as originally described by Lamport, makes no guarantees about progress, so implementations are compelled to incorporate timeouts as a compensatory measure. Raft, on the other hand, is prescriptive about the use of timeouts.</p>

<h2>Raft wins on accessibility</h2>

<p>One especially interesting component of the Raft specification is the mechanism for coordinating changes to cluster membership. The protocol employs a novel approach in which joint consensus is reached using two overlapping majorities, i.e. quorums defined by both the old and new cluster configuration, thereby supporting dynamic elasticity without disruption to operations.</p>

<p>The emergence of Raft has clearly seen a positive embrace by the software development community as evidenced by nearly 40 <a href="http://raftconsensus.github.io/#implementations">open source implementations</a> in a variety of different languages. Even though Paxos is beautifully elegant in describing the essence of distributed consensus, the absence of a comprehensive and prescriptive specification has rendered it inaccessible and notoriously difficult to implement in practical systems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cerner and Open Source]]></title>
    <link href="http://engineering.cerner.com/2014/01/cerner-and-open-source/"/>
    <updated>2014-01-16T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/2014/01/cerner-and-open-source</id>
    <content type="html"><![CDATA[<p>(This post was written by Nathan Beyer, Bryan Baugher and Jacob Williams.)</p>

<p>The use of open source software has become nearly ubiquitous in contemporary software development and it is no different for us, here at Cerner. We have been using open source software, directly and indirectly, for decades. Over the past decade, we’ve grown in maturity both in our use of open source software as well as our participation in open source communities. Our associates have long been contributors to open source communities, including helping users, logging bugs and enhancements, and submitting patches. Cerner associates also spearheaded the development of the <a href="http://wiki.directproject.org/Java+Reference+Implementation">Java Reference Implementation of the Direct Project</a>.</p>

<p>Recently, we’ve decided to take another step in the open source journey by releasing complete projects on our <a href="https://github.com/cerner">Github organization</a>. Although these projects seem small, they are a big step for us and just the beginning of what we hope to open up and share in the future. We hope you’ll check out these projects and participate in their development.</p>

<h2>Project: knife-tar</h2>

<p>Source: [<a href="https://github.com/cerner/knife-tar">https://github.com/cerner/knife-tar</a>]</p>

<p>Knife-tar is a <a href="http://www.getchef.com/chef/">Chef</a> tool for uploading and downloading Chef components from a tar file. It can be used for creating backups of your chef-server or for uploading released Chef artifacts from a repository.</p>

<h2>Project: scrimp</h2>

<p>Source: [<a href="https://github.com/cerner/scrimp">https://github.com/cerner/scrimp</a>]</p>

<p>Scrimp is a tool for interactively testing <a href="http://thrift.apache.org/">Thrift</a> services in a web browser. It’s meant to fill the same role that browser-based REST clients fill for web services. Given the IDL files for the services, it provides a UI to help construct requests, invoke services, and display formatted responses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cerner Tech Talks]]></title>
    <link href="http://engineering.cerner.com/2013/11/cerner-tech-talks/"/>
    <updated>2013-11-12T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/2013/11/cerner-tech-talks</id>
    <content type="html"><![CDATA[<p>We are always looking for ways to share knowledge and learn new things within engineering at Cerner. Whether that be through meetups, lunch &amp; learns, conferences, or <a href="http://engineering.cerner.com/2013/08/devcon/">DevCon</a>, we have a variety of outlets available to us.</p>

<p>Today, we’re announcing a new program we recently launched: Cerner Tech Talks.</p>

<p>Cerner Tech Talks brings in great speakers for talks that would be of interest to engineers at Cerner. These talks will be held periodically and will vary widely in their content. Each talk will be recorded and available for viewing via our <a href="http://www.youtube.com/user/CernerEng">Cerner Engineering YouTube channel</a>.</p>

<p>Last week, we held our first tech talk, which you can view below. <a href="http://www.robertvbinder.com/">Robert Binder</a>, an accomplished software testing expert, presented on model-driven development.</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/OSlm6F8YmKc" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 Software Intern Hackfest]]></title>
    <link href="http://engineering.cerner.com/2013/11/2013-software-intern-hackfest/"/>
    <updated>2013-11-11T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/2013/11/software-intern-hackfest</id>
    <content type="html"><![CDATA[<p>Providing opportunities for students to gain experience in software development and grow the skills necessary to excel in their careers after graduation is a top priority for Cerner Engineering. Our annual Software Intern Program gives students insight into the design, implementation, testing, deployment, and maintenance of large-scale software projects, which are often beyond the scope of the typical academic experience.</p>

<p>In 2013, we had a total of 224 interns across all business segments with 107 placed into the Software Intern Program to grow their experience as Software Engineers. Each intern was placed on an engineering team, paired with a dedicated mentor, and immediately began learning to use industry-standard tools and processes. They worked on real projects that will ultimately end up in the hands of our clients and play a part in transforming healthcare through the use of technology.</p>

<p>This summer, interns worked on a wide variety of projects spanning from Eclipse RCP applications, Web services, iPad applications, or working with Big Data in the cloud. They used Java, iOS, Ruby, .NET, and many other technologies to solve problems and create new solutions to ensure each intern learned something new while challenging them to take away a new set of skills at the end of their summer experience.</p>

<p>But it’s not all work &ndash; the summer schedule was full of opportunities to learn about Kansas City, Healthcare, network with other interns in the program, and have as much fun as possible. This year, we kicked off the internship program at a <a href="http://www.sportingkc.com/">Sporting KC</a> soccer game, including a private tailgating event. Interns also got a chance to experience the <a href="http://www.jewell.edu/tucker">Tucker Leadership Lab</a>, attend lunchtime tech-talks, participate in a CodeRetreat, attend our annual Developer’s Conference (<a href="http://www.youtube.com/watch?v=cE0YoFg-hkE">DevCon</a>), go to <a href="https://www.worldsoffun.com/">Worlds of Fun</a>, and go on tours around Kansas City to learn more about the different parts of town and what makes this a great place to live and work.</p>

<p>One of the most fun events this past summer was the <strong>Software Intern Hackfest</strong>. An optional event, Interns formed teams of 2-4 and were given a week with the goal of:</p>

<ol>
<li>Dream it.</li>
<li>Build it.</li>
<li>Present it.</li>
<li>Profit!!!</li>
</ol>


<p>The teams were given a week to build anything they wanted and presented the end result to a panel of Cerner software developers for prizes and glory. We took some time to sit down with two of the winning teams to get their thoughts on the Hackfest and their overall experience with the internship program.</p>

<h2>Grand Prize winners: <a href="http://engineering.cerner.com/engineers/team-golf/">Team Golf</a></h2>

<p><strong>Addison Shaw, Richard Habeeb</strong></p>

<p><strong>Cerner:</strong> Describe your project and how you created it.</p>

<p><strong>A&amp;R:</strong> When we came up with the project, we thought, in one week, how far could we push ourselves? Let&rsquo;s do a game. We wanted a challenge.</p>

<p>We chose JavaScript because neither of us had much experience with it previously. JavaScript is really cool because it has a lot of game frameworks already. We found KineticJS &ndash; it mainly handled the html 5 canvas. It lets you do simple animations, rotations, and scaling.</p>

<p>When we were coming up with the design of the game, it was more of a &ldquo;create as you go&rdquo; project. We didn&rsquo;t just sit down and immediately come up with a game of aliens, cows and robots. We started out with a framework.</p>

<p>We wanted the game to be dynamically generated, and we wanted it to be a traditional survival game.</p>

<p>We knew it had to be 2-d. We built the framework with a grid structure. We made all the graphics ourselves with a pixelater.</p>

<p><strong>Cerner:</strong> What were your biggest takeaways?</p>

<p><strong>Addison:</strong> I learned a lot of JavaScript and CSS Less along the way. I&rsquo;m a lot more interested in web development now. I also learned that it&rsquo;s okay to go well into the night to finish a project, and it relates to the real-life work environment. Knowing that we were competing against other teams and having the hard stop was motivation. We knew it didn&rsquo;t have to be perfect; we just had to finish.</p>

<p><strong>Richard:</strong> I called it free motivation. It&rsquo;s a competition, and there&rsquo;s that side of me that wants to do really well. There&rsquo;s also a deadline. It&rsquo;s a chance to show off your work to others. The project was very self-directed. We came up with the tools and decided it ourselves. The creativity part was awesome.</p>

<p><strong>Cerner:</strong> What was the most fun?</p>

<p><strong>Addison:</strong> I had Richard over to my house one day. We bought a bunch of snack food and red bull and worked on the game. My mom got us a pizza and it was really fun! We also did some trash talking with other interns. That was fun.</p>

<p><strong>Cerner:</strong> What will you do with your prize? (Raspberry Pi)</p>

<p><strong>Addison:</strong> It was an awesome prize! I want to do something with home automation. We are living in a house [at college] this year. Maybe I’ll create something like clap on lights.</p>

<p><strong>Richard:</strong> I do robotics a lot during the school year and I was thinking of working with it at our club.</p>

<h2>Crowd Favorite: <a href="http://engineering.cerner.com/engineers/team-mad-scientists/">Mad Scientists</a></h2>

<p><strong>Alex Valentine, George Li, Jack Miles</strong></p>

<p><strong>Cerner:</strong> Describe your project and how you created it.</p>

<p><strong>Alex:</strong> It was my idea to make a game. For the longest time, we didn’t know what we wanted to do. Originally we were going to make a 2-D game. We thought it would be easy not making that 3rd dimension. There is a game that puts 2D and 3D together. It looked really simple and easy. So we went with that.</p>

<p><strong>Jack:</strong> A few of us weren’t familiar with C#.</p>

<p><strong>George:</strong> We all liked to play video games! We used Unity to create it. Someone told me if you want to learn Git you should forget everything about SVN. That didn’t necessarily happen for me.</p>

<p><strong>Cerner:</strong> How did you communicate the tasks that needed to be done?</p>

<p><strong>Alex:</strong> We assigned people different aspects of the game. I took characters.</p>

<p><strong>George:</strong> I took responsibilities for weapons.</p>

<p><strong>Jack:</strong> I took charge of enemies.</p>

<p><strong>Cerner:</strong> How did you deal with integration?</p>

<p><strong>Jack:</strong> For the longest time Git was giving me problems. I was on a Mac and they were on PCs.</p>

<p><strong>Alex:</strong> We learned that we should never commit directly to the master branch. Making mistakes and then figuring out how to fix them really helped me learn Git.</p>

<p><strong>George:</strong> I learned more about Git than creating the game and ended up giving a lightning talk on Git. The Unity engine isn’t setup well for source control. We would have to diff in different stuff.</p>

<p><strong>Cerner:</strong> You learned some new technologies – what else did you learn?</p>

<p><strong>Alex:</strong> Start early. Be efficient.</p>

<p><strong>Jack:</strong> If you’re working on new technologies, learn each technology before going too deep. That way when we’re trying to do real work, you aren’t worrying about how to use it.</p>

<p><strong>George:</strong> It was about Wednesday when we still didn’t have anything working. When he told me, &ldquo;I’ll be happy if it shoots,&rdquo; I knew we were in trouble. [Editor’s Note: At the competition, the main character was able to shoot, but only backwards, which was a huge crowd pleaser]</p>

<p><strong>Alex:</strong> When you realize that what you were going to do and your deadline are not going to jive, what do you do? We decided we wanted one of everything instead of having multiples of everything. We needed to scale our project down a bit.</p>

<p><strong>Cerner:</strong> What was the most fun?</p>

<p><strong>Alex:</strong> The lunch meetings were pretty entertaining!</p>

<p><strong>Jack:</strong> The &ldquo;fun&rdquo; of frustration. The [other teams&#8217;] presentations were fun for me because, although we set the goal and didn’t quite make it, you could tell there were a lot of people in the same situation. Everyone who has worked on software has been in our position.</p>

<h3>Learn More</h3>

<p>For more information about the Cerner Summer Intern Program, visit <a href="http://www.cerner.com/About_Cerner/Careers/Student_Development/College_Students/">Cerner Careers Opportunities for College Students</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Lead the Way]]></title>
    <link href="http://engineering.cerner.com/2013/09/project-lead-the-way/"/>
    <updated>2013-09-11T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/09/project-lead-the-way</id>
    <content type="html"><![CDATA[<p>Improving the state of healthcare through innovation requires investing in others to join you on the journey; not just for today, but for the decades to come.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-09-11-project-lead-the-way/PLTWlogo.jpeg" title="Project Lead the Way" ></p>

<p>Project Lead the Way has established the Computer Science and Software Enginering course that teaches computational thinking to high school students, and it will pilot in 60 schools across the country this fall. Providing exposure to a wide variety of computational and computer science concepts, students can program a story or game in Scratch, write a mobile application for Android, and learn about knowledge discovery and data mining, computer simulation, cybersecurity, GUI programming, web development, version control, and agile software development.</p>

<p>Recently, I had the privilege of working with experts across the country to define the curriculum for Project Lead the Way as well as the opportunity to sit in on the training sessions given to the pilot teachers, hosted at Cerner&rsquo;s Innovation Campus. Bennett Brown, Director of Curriculum and Instruction, led the class into the deep end to solve the hard problems their students would face throughout the course. Experts augmented the training sessions from organizations such as Cerner, Lawrence Livermore National Laboratory, Purdue University, Carnegie Mellon University, University of Virginia, and more.</p>

<p>While the Computer Science and Software Engineering course (CSE) isn&rsquo;t focused specifically on programming, students will pick up introductory skills in a number of languages and environments including Python, MIT App Inventor, JavaScript, Logo, and Scratch among others. As software developers, we all have our origin stories with what sparked our interest in programming; there was a particular moment for each of us where we solved a problem and saw firsthand the power of what software can create. The CSE course seeks to generate those sparks through activities, projects, and problem-based learning.</p>

<p>This course follows in the footsteps of other Project Lead the Way courses in engineering and biomedical science currently operating in over 4,700 schools with more than 10,000 trained teachers.</p>

<h2><strong>What I Learned</strong></h2>

<p>My role in the class was to teach one simple section and provide some practical answers from the industry trenches. I&rsquo;ll let you in on a secret: I&rsquo;m pretty sure I learned more about teaching and how to teach novices than I taught on any particular topic.</p>

<p>Problems and projects in PLTW are designed to be approachable by all students; there is no ceiling for the advanced students who want to go beyond what is specifically covered. The teachers receiving training were given the same end-of-unit problems that their students will face during the year and had to work out solutions in a pair programming environment, often working in their dorms or in the Cerner training rooms until 10pm. The experience level of teachers ranged from those having engineering degrees and multiple years of industry experience before going into teaching to some who had never programmed in their lives before this class.</p>

<p>What I learned was that even in this environment of mixed skill levels, the activity/project/problem-based approach surprisingly requires just a minimal introduction to a new concept. After simple activities which build quick wins, natural curiosity swells up within each of the students; skill and understanding start to form, not just learning a particular technology but how to problem solve using software.</p>

<p>For example, during the App Inventor sections, teachers received step-by-step simple examples of putting together programming blocks to create a simple Android application before working on homework to through one Agile sprint with their partner that evening to come up with their own application from scratch. The next morning, pairs went through their demos in a rotating show-and-tell fashion, showing a variety of apps including a flash card game, as well as a &ldquo;one of these things is not like the other&rdquo; game using the accelerometer for randomization and featuring the appropriate Sesame Street music.</p>

<p>One night during the course I pulled down the Codea app for my iPad and showed my own kids the relationship between a few behaviors in a physics app and the corresponding code in Lua. Three hours later, all of the iPads in the house were engaged in hacking.</p>

<p>In addition to some great instruction over the course from Bennett Brown on a variety of problems in genetics, chaos theory, Tkinter and GUI programming, other highlights included:</p>

<p><a href="https://www-eng.llnl.gov/bios/bios_castillo.html">Vic Castillo</a>, Group Leader in the Quantitative Risk Analysis at Lawrence Livermore National Laboratories with a PhD in computational physics gave a great three hour survey presentation on what he sees as the &ldquo;big three&rdquo; topics in the future of computing: computer simulation and modeling (a subject near and dear to my own origin stories in computing), 3-D printing and mobile robotics featuring almost a dozen demos of cases where modeling was used to learn something new about a real-world system or design. Using just the <a href="http://ccl.northwestern.edu/netlogo/">NetLogo</a> multi-agent programmable modeling environment developed at Northwestern University, Vic showed a variety of models that could be built with just a basic knowledge of the Logo programming language: for instance, modeling the heat absorption of a home design and how different designs and window configurations affect the internal temperature of the living space), &ldquo;solving&rdquo; the game Lunar Lander, or how a First Robotics team modeled the software algorithms incorporated into their <a href="http://turtlebot.com">TurtleBot</a> (think Roomba + netbook + Kinect sensor).</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-09-11-project-lead-the-way/Netlogo.png" title="NetLogo" ></p>

<p><a href="http://people.virginia.edu/~jlc6j/">Joanne Cohoon</a> talked about achieving diversity in STEM classrooms and the state of the job market&mdash;how 50% of the jobs available involve some need for computational thinking and the challenges and how teachers can create classroom environments that attract students who might otherwise rule themselves out from the start based on the stereotypes and environments commonly surrounding STEM in schools. With half the workforce needing some kind of computational skill, we can&rsquo;t drive anyone away.</p>

<p>Peter Chapman, a PhD student at Carnegie Mellon University and Technical Leader of the <a href="https://picoctf.com">picoCTF</a> project joined us via Skype to describe the program. Set up along the storyline of an interactive adventure called Toaster Wars, picoCTF is a competition among high school students to solve as many of 57 challenges as they can using whatever means necessary&mdash;hacking, decrypting, reverse engineering, breaking or whatever. The challenges force students to get their hands dirty, learning on their own via documentation and their browser the role of cookies in web security, how to use grep and tar to find a secret key in a file, and other examples designed to give students the experience of tackling unknown problems using the resources available to them.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-09-11-project-lead-the-way/Toaster-War.png" title="Toaster War" ></p>

<p>Cerner interns and former Lee&rsquo;s Summit High School Team Driven First Robotics team members Dakota Ewigman and Victoria Utter taught a condensed version of the <a href="http://kcpowersource.com/appcamp/">KC Power Source Android App Camp</a> using <a href="http://appinventor.mit.edu">MIT App Inventor</a> which set the stage for more advanced App Inventor instruction provided by Dave O&#8217;Larte around calling and integrating web services and open APIs. We had developed a simple ballot and question and answer database-backed web service that let students and teachers hack around independently. In the category of unintended learning, and no doubt inspired by their picoCTF hacking, some of the teachers quickly found out how to troll other schools&#8217; services by injecting funny questions and answers about the course material.</p>

<h2><strong>Why It&rsquo;s Cool</strong></h2>

<p>At one point during the week, Bennett Brown shared with me the growth potential for PLTW&rsquo;s CSE program. In the engineering and biomedical engineering pathways, the year-over-year growth has been tremendous which is paving the way for an even faster uptake of the computer science offering. Such an important and widespread channel offers a great opportunity to influence the future of our entire industry and communities. With around 20% of the total pilot schools in this curriculum, Kansas City is getting a head start on building this pool of talent. We can use little advantages such as these to increase the value of KC as a hub for computing and entrepreneurial activity.</p>

<p>An instructor asked me at one point, &ldquo;What is Cerner looking for in high school students who take this course?&rdquo; I had the sense that the question sought an answer more about a specific technology or language. I don&rsquo;t really see that as the focus. Instead, I think what we want is defined more by sparking that interest in solving hard problems and coming away with the understanding that these problems exist in their community and that there are people in the community at companies like Cerner solving those problems every day.</p>

<h2><strong>Why It Matters</strong></h2>

<p>We have a lot to accomplish in &ldquo;engineering health,&rdquo; and K-12 outreach programs can feel like a long game that often take a back seat to immediate concerns around designing and shipping solutions. But seeing how even the less computing-savvy teachers started to get hooked on programming their Android devices or trying to get to the next level in picoCTF while beating their heads against man pages and HTTP dumps, it became clear to me that by getting involved in these programs we can accelerate not only the numbers of students comfortable with computational thinking, but also give them a network of relationships and experiences in their own communities to return to as their career and learning progresses. The long game may not be as long as we think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevCon]]></title>
    <link href="http://engineering.cerner.com/2013/08/devcon/"/>
    <updated>2013-08-26T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/08/devcon</id>
    <content type="html"><![CDATA[<p>(This is a joint post by <a href="http://engineering.cerner.com/engineers/frank-rydzewski/">Frank Rydzewski</a> and <a href="http://engineering.cerner.com/engineers/kevin-shekleton/">Kevin Shekleton</a>)</p>

<p>This past June, 2,500 associates from across Cerner came together for <a href="http://www.youtube.com/watch?v=cE0YoFg-hkE">DevCon</a>, our internal developers conference. Now in its 3rd year, DevCon is a two-day, engineering-led conference that was created to bring together Cerner associates involved in all aspects of development and technology. DevCon is organized and run like many other developer conferences, complete with a call for papers and a talk selection committee. This year, we had 80 talks covering a wide array of topics such as big data, user experience and design, DevOps, and mobile development.</p>

<p>A keynote presentation kicks off each day followed by talks across multiple tracks. <a href="https://twitter.com/skeptomai">Chris Brown</a>, CTO of <a href="http://www.opscode.com/">Opscode</a>, the creators of the open-source <a href="http://wiki.opscode.com/display/chef/Home">Chef Platform</a>, kicked off DevCon this year with a talk on the emergence and importance of DevOps. Within engineering at Cerner, embracing DevOps has had a big cultural impact on how we approach the software and systems we write and operate.</p>

<iframe width="560" height="315" frameborder="0" src="//www.youtube.com/embed/D2hK5WpYaWc?rel=0" allowfullscreen></iframe>


<p><a href="http://davehogue.com/">David Hogue</a>, a leading Interaction Designer and instructor at San Francisco State University, kicked off the second day talking about the importance of interaction design in business and software. Hogue&rsquo;s keynote was especially relevant to us as interaction designers play a prominent role in the creation and maintenance of our software.</p>

<iframe width="560" height="315" frameborder="0" src="//www.youtube.com/embed/zaeGuPT1m2o?rel=0" allowfullscreen></iframe>


<p>As you can see from the two keynote videos, the visual theme for DevCon this year was 8-bit gaming. Two 1980’s living room setups, packed with vintage NES consoles, CRT televisions, and piles of classic games, provided entertainment and nostalgia during the breaks in the conference schedule. At night, 20 teams competed for bragging rights and <a href="http://en.wikipedia.org/wiki/Retro_Duo">awesome</a> <a href="http://www.makeymakey.com/">prizes</a> at Geek Trivia Night, answering questions ranging from <em>name the sci-fi spaceships</em> to <em>identify the programming language from a snippet of code</em>.</p>

<p>As in previous years, DevCon ends with lightning talks in which anyone can present on a topic of their choosing provided it lasts for no more than 5 minutes. Lightning talks at DevCon can cover the gamut. Past lightning talks have covered Monads in Scala, a visual tour of Comic-Con, and world record strategies in Donkey Kong.</p>

<p>We&rsquo;ve also made available the DevCon 2012 keynote presentations, both from <a href="http://drjeffnorris.com/">Dr. Jeff Norris</a>, a scientist at NASA JPL responsible for the robotic spacecraft in the solar system. Norris talked on remaining agile while working on mission critical systems as well as the importance of specialization in the advancement of fields &mdash; both of these talks are well worth watching.</p>

<p>DevCon allows engineers across organizations to come together to learn and present on a variety of topics, fostering a culture of innovation. It is no wonder then that many engineers at Cerner cite DevCon as their favorite and most anticipated event within Cerner.</p>

<iframe width="560" height="315" frameborder="0" src="//www.youtube.com/embed/QFfmTLmn3Ow?rel=0" allowfullscreen></iframe>




<iframe width="560" height="315" frameborder="0" src="//www.youtube.com/embed/EfXl7X-0wRI?rel=0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevAcademy]]></title>
    <link href="http://engineering.cerner.com/2013/08/devacademy/"/>
    <updated>2013-08-14T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/08/devacademy</id>
    <content type="html"><![CDATA[<p>When I graduated from college, I thought I understood what it meant to develop software in the real world. It required process. It required troubleshooting. It required quality. However, to me, process meant waterfall. Troubleshooting meant trying a few things and then asking for help. Quality meant manual testing.</p>

<p>Agile methods were not unheard of when I graduated in 2001. My professors noted that iterative development was better than waterfall; they just only taught waterfall. Debuggers had been around since the 50’s, but my classmates and I still debugged with what I call &ldquo;Hi Mom!&rdquo; techniques. (We peppered our code with print statements.) Kent Beck had written the JUnit framework 4 years before, but it wasn’t entrenched in the Java culture yet. So it’s not surprising that my education didn’t cover these topics.</p>

<p>It took a few painful experiences in the real world to make me realize the way I programmed in college wasn’t the best way to engineer software. I needed to adopt some new practices.</p>

<p>Not much has changed in terms of software education. Being a part of Cerner’s software engineer training program, I am able to ask every group of new engineers three questions:</p>

<p>&ldquo;Do you use an agile process?&rdquo;</p>

<p>&ldquo;Do you use a debugger when troubleshooting your code?&rdquo;</p>

<p>&ldquo;Do you write automated unit tests?&rdquo;</p>

<p>Cerner has had explosive growth in engineering, so I’ve asked those questions of hundreds of recent graduates. Almost no one says yes. This told me that while colleges are doing a great job of teaching computer science, many schools are not teaching best practices in software development.</p>

<p>Until recently, Cerner wasn’t doing that great of a job of teaching them either. Our training program covered them, but we still saw the new engineers struggle to understand agile development, debug their code, and write their first unit test. One of Cerner’s core values is if you recognize something is broken, you are empowered to fix it. I knew our training program wasn’t working. It became my job to fix it.</p>

<p>Before tackling the whole program, I tried a little experiment. I wanted to see what it would take to get engineers in training to write just one unit test. At the time, training included a class on JUnit. In spite of the class, only 5% of the engineers were writing unit tests for training assignments.</p>

<p>To correct this, I started telling the engineers that I would take points off assignments that didn’t have a unit test. The idea was to create structural motivation. We immediately saw 40% of the engineers writing unit tests. A step forward, but it wasn’t enough.</p>

<p>The biggest obstacle to broader use of unit tests in training was that they didn’t know how to include the testing framework in their Java projects. That, more than the effort of writing the test, was keeping them from doing something we expected of them.</p>

<p>Something was wrong. We were teaching Maven in our training program. If you are not familiar with it, Maven helps you manage your project builds, and as a result, it helps you manage your dependencies. The engineers were already attending a class that taught them how to add dependencies to Java projects. They just weren’t able to associate what they had learned with the goal of bringing JUnit into their projects. They weren’t making the connection.</p>

<p>This connection was missed because engineers were learning about Maven in the absence of a problem. They were being told it’s an important tool, but we hadn’t given them a reason to use it. Later, when they did encounter the problem &ndash; &ldquo;How do I add the JUnit jar to my project?&rdquo; – it was too late. They had forgotten about Maven.</p>

<p>The key was to move the Maven training closer to when they needed the information. This is called &ldquo;Just in Time Teaching.&rdquo; It became the first requirement of the new program.</p>

<p>Another interesting aspect of my experiment is that 40% would write the tests even given the delay between training and practice. It should be obvious to anyone that’s ever taken a college programming class that some programmers can get it from lectures alone. Others have to practice. Any one-size-fits-all approach to training is flawed. The second requirement for the new program was that it must flex to meet the skills and learning styles of the engineers.</p>

<p>With these goals in mind, I started the redesign of Cerner’s training program. My first step was to interview a large sample of our software leaders. I asked them what they wanted engineers to learn. Time and time again, the top answers would be agile development, debugging, and automated unit tests. Surprisingly, it was not a list of technologies like iOS, Hadoop, JSON, or ReST.</p>

<p>The resumes of our newly hired engineers are full of languages and technologies. However, when asked what they wanted of new engineers, our lead architects described practices. If Cerner could get engineers to improve in practices, we could take the great engineers we were hiring and immediately make them more productive.</p>

<p>The scary thing is that sharing knowledge is easy, but changing people’s behavior is hard. Once I realized our problems were about software development behavior and not knowledge, I realized we would need to completely rebuild the way Cerner trains its new engineers. The result is DevAcademy.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-08-14-devacademy/DevAcademy.png" title="DevAcademy" ></p>

<p>Imagine you are a new engineer starting at Cerner. In your first week at Cerner, you report to the DevAcademy. The first two weeks focus on in-class instruction and assessment. The goal here is to introduce core software development behaviors and then assess your skills.</p>

<p>After completing the first two weeks of instruction, you join what we call the DevCenter and are assigned a real project. However, that project isn’t assigned by your team. You get to pick. The projects come from all over Cerner including web applications and services, tools to make engineers more productive, and even contributing to open source projects used by Cerner. In picking a project, you are telling Cerner the types of work you find interesting. This helps us determine the best place for you across our diverse range of solutions and technologies.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-08-14-devacademy/ManagersTalkingToEngineer1.jpg" title="Manager talking to engineer" ></p>

<p>While working on that first project, you have a dedicated mentor. You are expected to make progress on the project while receiving feedback. You also get just-in-time training on user stories, source code management, unit testing, and scrum. You get to use Cerner’s software development ecosystem in an isolated, safe environment.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-08-14-devacademy/Mentoring.jpg" title="Mentoring" ></p>

<p>Once you show readiness to join a team, you are allowed to demo your work to the teams that have open positions. Those teams can then pick the engineer that best fits their team. In this way, Cerner makes sure you are assigned to the right team for both Cerner and you.</p>

<p>DevAcademy recognizes that you should never stop learning, so the program continues well into your first few months on your team. You are offered classes on different technologies and more advanced topics as part of an elective-based training plan. You work with your manager to decide which classes to take. It’s Cerner’s way of making sure all of our engineers continue to grow.</p>

<p>We’ve had 150 engineers join DevAcademy since it was launched. I’ve had the privilege of seeing the new engineers struggle and then succeed on their projects. I’ve seen the light come on when they realize the usefulness good development practices and apply them effectively. I’ve seen them get excited about git and other powerful tools that they didn’t have the opportunity to learn during their formal educations. The best part of my job is that I’ve seen many very good engineers start down the career-long path towards becoming really great ones.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-08-14-devacademy/Staff.jpg" title="Staff" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 30 Days of Code Experiment]]></title>
    <link href="http://engineering.cerner.com/2013/08/the-30-days-of-code-experiment/"/>
    <updated>2013-08-06T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/08/the-30-days-of-code-experiment</id>
    <content type="html"><![CDATA[<p>In software development, we solve problems. As we solve these problems, we build connections in our minds of how to look at a problem, relate it to previous problems and solutions, and re-apply past approaches and techniques.</p>

<p>These behavior habits build dogmatic ways of thinking and limit design choices to selective technologies we’ve used in the past. As we all know, you have to continually learn new technologies and different ways of thinking to stay current in the ever-changing landscape of software development. Unfortunately, keeping up-to-date on technologies and approaches isn’t an easy behavior to maintain when you have many other priorities.</p>

<p>This spring, a few engineers wanted to bring focus to this important behavior trait by giving a tech talk on &ldquo;Honing your Craft,&rdquo; which discussed how to continuously strengthen and refine skills. Not only did we want engineers that we work with on a daily basis to be part of the tech talk; we wanted engineers from other teams at Cerner to be involved too. Also, we didn’t just want to talk about it; we wanted to pose a challenge to put people into action and re-enforce these behaviors.</p>

<p>At the end of the talk, we announced the challenge: 30 days of code. It was a challenge like many other &ldquo;30 day&rdquo; programs but was centered on learning new aspects of software development, languages, or just hacking up a tool that you find useful for your day-to-day development. The goal being that after 30 days, new habits and behaviors would be established to help promote continuous learning.</p>

<p>To make this a social learning experience, we built a Ruby web application called &ldquo;mural&rdquo; using async_sinatra and eventmachine to consume our GitHub Enterprise instance and show gists, which contained a code comment of &ldquo;30_days_of_code&rdquo;. The result was really interesting. Similar to Twitter, where you follow a specific hashtag, we were following code snippets of fellow developers. Since most of them were gists, they were small enough so you could easily see what they were doing (without having to go through a mountain of code). With this dashboard, a score was calculated based on count of your posts and was displayed with your avatar. Having scores displayed in descending order added a little peer pressure to keep people active in challenge.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-08-06-the-30-days-of-code-experiment/30-Days-of-Code.png" width="30" title="Days of Code" ></p>

<p>By the time I got back to my desk, I received questions of where the URL was to see the app, so they could verify their posts were showing. Soon, people wanted GitHub repos to show up with gists, so a pull request was requested for that. We then wanted anonymous gists to also get pulled in, which required developing our own crawler since these were exposed on the gist search. It was apparent that people wanted to share what they were doing, and people wanted to see it.</p>

<p>At the end of the challenge, we returned to the auditorium to highlight some of the posts that came in over the past month. During the 30 days, we had 124 gists posted and 17 different contributions in repos. People were showing their skills over a wide range of technologies. Examples were:</p>

<ul>
<li><p>Building a plugin to invoke Jenkins commands over a phone (using Siri)</p></li>
<li><p>Ruby scripts that interact with our Github Enterprise instance API that will send out emails when pull requests or branches are getting old (executed periodically through Jenkins)</p></li>
<li><p>Clojure application that looks for pull requests based on Github organizations, which have two &ldquo;+1&rdquo; comments (alerting which pull request may be candidates to close out)</p></li>
<li><p>Illustrating Crucible code interactions by extracting data with python and visualizing with D3
Using Node.js to flash lights on a Raspberry Pi when a health check from web service is failing</p></li>
<li><p>Presenting statistics from a storm cluster with Rickshaw</p></li>
</ul>


<p>Eleven people presented what they worked on and learned. It was amazing to see all of the different ideas people came up with in this time frame.</p>

<p>Even more interesting was how quickly people learned from the ideas of others. Not only were developers sharing their code snippets, but they were also sharing the problem they were attempting to solve or the idea of what they wanted invent. For example, the Ruby script which alerted the last committer of a dead branch through email, spawned into other implementations that would send alerts based on different pieces of Github data (ex. old pull requests). Sharing these ideas in their early stages (through code snippets) really accelerates the rate that an idea can be seeded in other minds and helps inspire even more innovation and learning.</p>

<p>This wasn&rsquo;t only a challenge of what we would build, but it was also an experiment of what can happen by taking a small portion of your day and doing something different. By structuring this exercise around a formal challenge that included a competitive aspect, there was additional motivation to get involved and stay involved to the end.</p>

<p>In summary, find a way to take a little time out of your day to try something different; you will be amazed with the different perspectives that you gain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking in MapReduce]]></title>
    <link href="http://engineering.cerner.com/2013/07/thinking-in-mapreduce/"/>
    <updated>2013-07-31T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/07/thinking-in-mapreduce</id>
    <content type="html"><![CDATA[<p><em>This is the blog form of the Thinking in MapReduce talk at StampedeCon 2013. I’ve linked to existing resources for some items discussed in the talk, but the structure and major points are here.</em></p>

<p>We programmers have had it pretty good over the years. In almost all cases, hardware scaled up faster than data size and complexity. Unfortunately, this is changing for many of us. Moore&rsquo;s Law has taken on a new direction; we gain power with parallel processing rather than faster clock cycles. More importantly, the volume of data we need to work with has grown exponentially.</p>

<p>Tackling this problem is tremendously important in healthcare. At the most basic level, healthcare data is too often fragmented and incomplete: an individual’s medical data is spread across multiple systems for different venues of care. Such fragmentation means no one has the complete picture of a person’s health and that means decisions are made with incomplete information. One thing we’re doing at Cerner is securely bringing together this information to enable a number of improvements, ranging from better-informed decisions to understanding and improving the health of entire populations of people. This is only possible with data at huge scale.</p>

<p>This is also opening new opportunities; Peter Norvig shows in the <a href="http://www.youtube.com/watch?v=yvDCzhbjYWs">Unreasonable Effectiveness of Data</a> how simple models over many data points can perform better than complex models with fewer points. Our challenge is to apply this to some of the most complicated and most important data sets that exist.</p>

<h2>New problems and new solutions</h2>

<p>Our first thought may be to tackle such problems using the proven, successful strategy of relational databases. This has lots of advantages, especially the <a href="http://en.wikipedia.org/wiki/ACID">ACID semantics</a> that are easy to reason about and make strong guarantees about correctness. The downside is such guarantees require strong coordination between machines involved and in many cases the cost of that coordination grows as the square of data size.  Such models should be used whenever they can, but to reason about huge data sets holistically means we have to consider different tradeoffs.</p>

<p>So we need new approaches for these problems. Some are clear upfront: as data becomes too large to scale up on single machines, we must scale out across many. Going further, we reach a point where we have too much data to move across a network &mdash; so rather than moving data to our computation, we must move computation to data.</p>

<p>In fact, these simple assertions form the foundation of MapReduce: we move computation to data by running map functions across individual records without moving them over the network and merge and combine, or reduce, the output of those functions into a meaningful result. <a href="http://wiki.apache.org/hadoop/WordCount">Word count</a> is the prototypical example of this pattern in action. MapReduce implementations as offered by Hadoop actually offer a bit more than this, with the following phases:</p>

<ul>
<li><p><em>Map</em> &mdash; transform or filter individual input records</p></li>
<li><p><em>Combine</em> &mdash; optional partial merge of map outputs in the mapping process, usually for efficiency</p></li>
<li><p><em>Shuffle and Sort</em> &mdash; Sort the output of map operations by an arbitrary key and partition map output across reducers</p></li>
<li><p><em>Reduce</em> &mdash; Process the shuffled map output in the sorted order, emitting our final result.</p></li>
</ul>


<p><img class="center" src="http://engineering.cerner.com/assets/2013-07-31-thinking-in-mapreduce/MapReduce1.png" title="MapReduce" ></p>

<p>We have our building blocks: we can split data across many machines and apply simple functions against them. Hadoop and MapReduce support this pattern well.  Now we need to answer two questions: How do we use these building blocks effectively and how do we create higher-level value on top of them?</p>

<p>The first step is to maximize parallelism. The most efficient MapReduce jobs shift as much work into the map phase as possible, even to the point where there is little or no data that needs to be sent across the network to the reducer. We can gauge the gains made by scaling out by applying <a href="http://en.wikipedia.org/wiki/Amdahl's_law">Amdahl’s Law</a> where the parallelism is the amount of work we can do in map tasks versus more serial reduce-side operations.</p>

<p>The second step is to compose our <em>map, combine, shuffle, sort, and reduce</em> primitives into higher-level operations. For example:</p>

<ul>
<li><p><em>Join</em> &mdash; Send distinct inputs to map tasks, and combine them with a common key in the reducers.</p></li>
<li><p><em>Map-Side Join</em> &mdash; When one data set is much smaller than another, it may be more efficient to simply load it in each map task, eliminating the reduce phase overhead outright.</p></li>
<li><p><em>Aggregation</em> &mdash; Summarizes big data to be easily computed.</p></li>
<li><p><em>Loading into external systems</em> &mdash; The output of the above operations can be exported to dedicated tools like R to do further analysis.</p></li>
</ul>


<p>Beyond that, the above operations can be composed into sophisticated process flows to take data from several complex sources, join it together, and distill it down into useful knowledge. The book <a href="http://shop.oreilly.com/product/0636920025122.do">MapReduce Design Patterns</a> discusses all of these patterns and more.</p>

<h2>Higher-Level APIs</h2>

<p>Understanding the above patterns is important but much like how higher-level languages have grown dominant, higher-level libraries have replaced direct MapReduce jobs. At Cerner, we make extensive use of <a href="http://crunch.apache.org">Apache Crunch</a> for our processing infrastructure and of <a href="http://hive.apache.org">Apache Hive</a> for querying data sitting in Hadoop.</p>

<h2>Reasoning About the System</h2>

<p>Most of development history has focused on variations on <a href="http://www.infoq.com/presentations/Value-Values">Place-Oriented Programming</a>, where we have data in objects or database rows and we apply change by updating our data in place.  Yet such a model doesn’t align with MapReduce; when dealing with mass processing of very large data sets, the complexity and inefficiency involved in individual updates becomes overwhelming. The system would become too complicated to perform or reason about. The result is a simple axiom for processing pipelines: <em>start with the questions you want to ask and then transform the data to answer them.</em> Re-processing huge data sets at any time is what Hadoop does best and we can leverage that to view the world as pure functions of our data, rather than trying to juggle in-place updates.</p>

<p>In short, the MapReduce view of the world is a holistic function of your raw data. There are techniques for processing incremental change and persisting processing steps for efficiency but these are optimizations. Start by processing all data holistically and adjust from there.</p>

<h2>Beyond MapReduce</h2>

<p>The paper <a href="http://homes.cs.washington.edu/~alon/files/dataspacesDec05.pdf">From Databases to Dataspaces</a> discusses a new view of integrating and leveraging data. A similar idea has entered the lexicon under the label &ldquo;Data Lake&rdquo; but the principles align: securely bring structured and unstructured data together and apply massive computation to it at any time for any new need. Existing systems are good at efficiently executing known query paths but require a lot of up-front work, either by creating new data models or building out infrastructure for the immediate need. Conversely, Hadoop and MapReduce allow us to ask questions about our data in parallel at massive scale without prior build.</p>

<p>This becomes more powerful as Hadoop becomes a more general fabric for computation. Projects like <a href="http://spark-project.org">Spark</a> can be layered on top of Hadoop to significantly improve processing time for many jobs. SQL- and search-based systems allow faster interrogation of data directly in Hadoop to a wider set of users and domain-specific data models can be quickly computed for new needs.</p>

<p>Ultimately, the gap between the discovery of a novel question and our ability to answer it is shrinking dramatically. The rate of innovation is increasing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIRST Robotics Championship Competition in St. Louis]]></title>
    <link href="http://engineering.cerner.com/2013/04/first-robotics-championship-competition-in-st-louis/"/>
    <updated>2013-04-23T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/04/first-robotics-championship-competition-in-st-louis</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://engineering.cerner.com/assets/2013-04-23-first-robotics-championship-competition-in-st-louis/Ultimate-Ascent.jpg" title="Ultimate Ascent" ></p>

<p>Cerner places a high value on talent development programs offering students the experience to build practical and tangible skills for the modern work environment. As part of this focus, Cerner supports FIRST Robotics, a competition providing experience in software engineering, where students learn to deal with complexity, time constraints, quality, and technical communications. Sound familiar? I wish they had this program when I was a kid!</p>

<p>High school students from Kansas City will be testing their minds, willpower, and teamwork in this global robotics championship competition April 24-27 in St Louis, Missouri. The secret game design was revealed in January, and with just six weeks to build, over 2,000 teams created completely unique robots. Design, engineering, metal fabrication, project management, marketing, and fundraising are all activities that students gain exposure to in this real-world project. Most importantly, they practice creative problem solving in complex team dynamics.</p>

<p>The championship teams you may have seen in the Kansas City Regional are:</p>

<ul>
<li>Team 1710 &ndash; The Ravonics Revolution</li>
<li>Team 1730 &ndash; Team Driven</li>
<li>Team 1806 &ndash; S.W.A.T.</li>
<li>Team 1939 &ndash; The Kuh-nig-its</li>
<li>Team 1986 &ndash; Team Titanium</li>
<li>Team 1987 &ndash; Broncobots</li>
<li>Team 3528 &ndash; Up Next!</li>
</ul>


<p>Students are challenged with two software programming components: digital media marketing and robot controls. Students will use a wide range of web, mobile, and media development technologies to create their team&rsquo;s marketing strategy.</p>

<p>Robot controls is broken down into two types: autonomous and teleoperated programs. In autonomous mode the robot responds exclusively to preprogrammed commands based on sensor feedback from a camera, accelerometer, gyro, encoders, and more. In teleoperated mode, the robot continues to use sensors but now can receive input from the drive team using game joysticks.</p>

<p>Students can use three different programming languages for the robot control system:</p>

<ol>
<li>LabVIEW from National Instruments</li>
<li>C++ with Wind River Workbench</li>
<li>Java with Netbeans</li>
</ol>


<p>The most important tool for control system programmers is a white board. Students diagram and visualize all the inputs and outputs of each system: motors, actuators, sensors, and driver station. Mapping inputs to outputs is important not just during the construction of the program, but it also helps to train the drive team. Students use online resources, collaborate with other teams, and receive guidance from their technical mentors. Practicing resourcefulness prepares them for the complex professional engineering environment they will soon become a member of.</p>

<p>Cerner is engaged in the Kansas City community at many levels. We are a sustaining partner in the KC STEM Alliance. Many Cerner associates mentor local teams, volunteer at local events, and are involved parents. These experiences exercise student minds in very real and practical ways. They are more prepared for technical and non-technical Cerner careers. Their passion and commitment is the fuel for delivering our future innovation.</p>

<p>Here is this year’s gameplay video:</p>

<iframe width="560" height="315" class="aligncenter" frameborder="0" src="https://www.youtube-nocookie.com/embed/wa5MGEZNrf0?rel=0" allowfullscreen></iframe>


<p>For more information, check out the links below:</p>

<ul>
<li><a href="http://www.usfirst.org/roboticsprograms/first-championship">http://www.usfirst.org/roboticsprograms/first-championship</a></li>
<li><a href="http://www.kcfirst.org/">http://www.kcfirst.org/</a></li>
<li><a href="http://www.kcstem.org/">http://www.kcstem.org/</a></li>
<li><a href="http://www.youtube.com/user/FRCTeamsGlobal">http://www.youtube.com/user/FRCTeamsGlobal</a></li>
<li><a href="http://wpilib.screenstepslive.com/s/3120">http://wpilib.screenstepslive.com/s/3120</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn What the Rules Don't Cover]]></title>
    <link href="http://engineering.cerner.com/2013/04/learn-what-the-rules-dont-cover/"/>
    <updated>2013-04-19T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/04/learn-what-the-rules-dont-cover</id>
    <content type="html"><![CDATA[<p>Most technical problems are like games.  All of them have a way to win and all of them have rules; the easiest way to ensure you always win is to learn the rules inside and out, and more importantly what the rules don’t cover!  Paying attention to what the rules don’t cover is what leads to out of the box thinking.  What sets the great players apart from the rest is learning what the rules don’t cover which allows for creativity and, sometimes, shortcuts.</p>

<p>Recently, I played a game similar to musical chairs. It was a game of diminishing resources (a management exercise) with about 12 of us and six large sheets of paper.  The only rules were: 1) Walk around while the music is playing and 2) Put your foot on a rectangle when the music stopped (he instructor pointed at one of the sheets as a visual queue).  When we first started, there was ample space for each of us to have a foot somewhere on one of the 2’ x 4’ paper.</p>

<p>As the game continued, the instructor started cutting the sheets into smaller and smaller pieces until we got down to 3&#8221; x 5&#8221;.  Most of us were precariously trying to balance and keep a portion of a shoe touching the paper, a few just gave up, and two paid special attention to the rules and found an out.  One gentleman took at a business card and promptly stood on it.  Another just lifted his leg and put it up on the door.  We all were following the same rules but two found what the rules didn’t cover and won.</p>

<p>Most people think that Printing is easy.  You hit a button or Ctrl + P and the paper comes out, right?  This seamless process appears so to users because of the hard work that goes in behind the scenes.  So when I started down this path, I knew a strong foundation would be important. I settled on <a href="http://www.cups.org">CUPS</a> as the basis for my brave new world of printing.  It is open source and has a pretty wide following.  It’s the basis for Apple printing, fairly hardened, and is the backbone of several educational systems printing making it enterprise ready.</p>

<p>The more I worked with it, the more I saw its full potential.  CUPS had turned out to be the most useful &ldquo;Swiss Army Knife&rdquo; in my toolbox.  It is extremely robust and easy to integrate / stack with other solutions.  One great example of this is my &ldquo;Coffee CUPS&rdquo; demo.</p>

<iframe width="560" height="315" class="aligncenter" frameborder="0" src="https://www.youtube-nocookie.com/embed/WzEhKs_CvJc?rel=0" allowfullscreen></iframe>


<p>I picked CUPS as the underlying backbone for my new architecture for the same reason.  It had the maximum amount of possibilities with the least amount of rules.  With a minimum amount of rules, it allows for the maximum amount of creativity.  Sure, I could develop my own solution from the ground up where I get to make the rules and have unlimited creativity, and I have had to do that in the past.  In general, if you write your own software, you have the least amount of rules (constraints of the compiler).  OpenSource Software is a close second with few limitations.  Closed source 3rd party software usually has the most rules (ever read a EULA in your life?).  When selecting a solution to a problem, it’s also important to do a cost benefit analysis.  Is it really worth reinventing the wheel?  I’m often reminded of the below picture.  I’ve seen several variations of it over the years (Credit to the picture unknown, but it wasn’t me).</p>

<p>CUPS handles a lot of the general architecture that doesn’t need to be re-invented on either end of the spectrum (managing print queues, accepting jobs, sending jobs to printers, etc) but allows for a lot of creativity in the middle (the middle being what is done to the print job in between getting it from the user and sending it to the printer).  A good example of this (filters) can be found <a href="http://en.wikipedia.org/wiki/File:Cups_simple.svg">here</a>.  CUPS gives you an overall framework of how it will call a filter, and what it expects as a return, but beyond that, it’s up to the programmer.  You can write in pretty much any language you want and alter the print job as much as you want.  I leveraged this to maximize the amount of devices I could talk to and input file types I could accept, while also being able to make business decisions based on the content of the print job.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-04-19-learn-what-the-rules-dont-cover/HPRW2.jpg" title="HPRW2" ></p>

<p><em>Source: www.projectcartoon.com</em></p>

<p>I think that picture aptly describes the disconnect in all of the processes that exist in problem solving.  So in addition to learning what the rules don’t cover, we need to be keenly aware of what you are trying to accomplish: what is the problem and the success criteria? How do we win the game?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby at Cerner]]></title>
    <link href="http://engineering.cerner.com/2013/04/ruby-at-cerner/"/>
    <updated>2013-04-05T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/2013/04/ruby-at-cerner</id>
    <content type="html"><![CDATA[<p>Cerner&rsquo;s journey with Ruby started in the summer of 2009. We selected Ruby on Rails for rapid development of the <a href="https://store.cerner.com/">Cerner Store</a> to prepare for release at the Cerner Health Conference that year. In three months, with three engineers and a designer, we wrote and released the first version of an e-commerce web application. Two of those engineers, including me, had never worked with Ruby before but quickly realized the power and expressiveness of the language due to resources like <a href="http://mislav.uniqpath.com/poignant-guide/">Why&rsquo;s (Poignant) Guide to Ruby</a>.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-04-05-ruby-at-cerner/the.foxes-4c.png" title="Chunky bacon!" ></p>

<p>Our experience with the Cerner Store taught us that Rails led to high productivity. Ruby is a very natural language to write code in and principles like <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">convention over configuration</a> enabled us to solve our problems instead of spending time wrangling the framework. In addition, we valued the good practices of the Ruby community like easy-to-understand code and thorough unit testing with tools that aren&rsquo;t painful.</p>

<p>In the summer of 2010, we attended the first <a href="http://rubymidwest.com/">Ruby Midwest</a> as a team. We learned about developments in Ruby like JRuby and Chef as well as some of the great gems under development. The Cerner Store continued to grow and we learned about maintaining a Rails web app over time.</p>

<p>In early 2012, we were planning a massive undertaking to create a new platform for our Clients&#8217; healthcare data. It was to be called Millennium+ and it needed an architecture that could scale well to petabytes of data and dozens of engineers across many teams. We planned a <a href="http://engineering.cerner.com/2013/02/near-real-time-processing-over-hadoop-and-hbase/">service-oriented architecture</a> and chose Rails to serve as the server side of the application. Our Rails services call JVM services that retrieve data from HBase and serves the resulting data as JSON to the client-side applications, including our iOS app, PowerChart Touch Ambulatory. The high productivity we enjoyed on a small team scaled well to a large team of people who had never written Ruby before.</p>

<p>This was the start of Cerner&rsquo;s Ruby community. We developed reusable libraries and development processes that we continue to use today. The complexities of our architecture also led to the adoption of <a href="http://www.opscode.com/chef/">Chef</a> to automate operations and build a devops mindset. Chef is another integral use of Ruby that penetrates teams that did not use Ruby at all.</p>

<p>When planning our newest platform, <a href="http://www.cerner.com/blog/population_health_management_collaboration_with_advocate_physician_partners/">Population Health</a>, we needed to determine which platform made the most sense for a large-scale development of web applications on a tight timeline. We decided on Rails due in large part to its prioritization of convention over configuration, as well as the existing Ruby community at Cerner. These attributes would enable us to develop applications at the planned pace and scale. This decision is now disseminated to dozens of engineers working on brand new web applications and REST services powering them.</p>

<p>We&rsquo;ve bolstered our internal Ruby community with lots of documentation and guidelines. We make use of the <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">Ruby on Rails Tutorial book</a> and Why&rsquo;s (Poignant) Guide to train engineers in Ruby. Bozhidar Batsov&rsquo;s <a href="https://github.com/bbatsov/ruby-style-guide">Ruby style guide</a> aligns closely with how we write our code, so we use <a href="https://github.com/bbatsov/rubocop">rubocop</a> to keep ourselves in line. Our development devices run on <a href="https://rvm.io/">RVM</a> and our servers run on <a href="https://www.phusionpassenger.com/">Phusion Passenger</a>.</p>

<p>Ruby has quickly become a very important part of Cerner&rsquo;s engineering culture, primarily as the language behind Rails and Chef. An internal Ruby meetup has begun and there have been presentations involving Ruby at our annual Developer Conference.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2013-04-05-ruby-at-cerner/ruby-midwest-logo-2013.png" title="Ruby Midwest 2013 Logo" ></p>

<p>Additionally, we are sponsoring <a href="http://rubymidwest.com/">Ruby Midwest</a> because we want developers to know that Ruby is highly valued at Cerner. We&rsquo;re also sending a large number of our own associates there to learn.</p>

<p>We look forward to bringing on more engineers to use Ruby and other technologies to engineer the future of healthcare.</p>
]]></content>
  </entry>
  
</feed>
